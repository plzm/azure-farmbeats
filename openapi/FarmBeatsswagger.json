{
	"swagger": "2.0",
	"info": {
		"version": "v1",
		"title": "Azure FarmBeats API",
		"description": "<p>\r\n<p>Azure FarmBeats helps you build digital agricultural solutions in Azure. By providing a standardized schema to query agricultural data from various sources, Azure FarmBeats provides you:\r\n<ul >\r\n <li style=\"margin: 7px;\">Ability to acquire, aggregate, process and store agricultural data.</li>\r\n <li style=\"margin: 7px;\">Capability to fuse data between data sources and generate insights.</li>\r\n <li style=\"margin: 7px;\">Schematized access and query capabilities on ingested data.</li>\r\n</ul>\r\n</p>\r\n<h><b>REST Operation Groups</b></h>\r\n<p><b>Farm:</b></p>\r\n<p>Farm corresponds to a physical location of interest within the system. Each Farm has a Farm name and a unique farm id.</p>\r\n<p><b>Device:</b></p>\r\n<p>Device corresponds to a physical device present in the farm. Each device has a unique device id. Device is typically provisioned to a farm with a farm id.</p>\r\n<p><b>DeviceModel:</b></p>\r\n<p>DeviceModel corresponds to the meta-data of the device such as the Manufacturer, Type of the device either Gateway or Node.</p>\r\n<p><b>Sensor:</b></p>\r\n<p>Sensor corresponds to a physical sensor that records values. A sensor is typically connected to a device with a device id.</p>\r\n</p>\r\n<p><b>SensorModel:</b></p>\r\n<p>SensorModel corresponds to the meta-data of the sensor such as the Manufacturer, Type of the sensor either Analog or Digital, Sensor Measure such as Ambient Temperature, Pressure etc.</p>\r\n<p><b>Telemetry:</b></p>\r\n<p>Telemetry provides the ability to read telemetry messages for a particular sensor & time range.</p>\r\n<p><b>Job:</b></p>\r\n<p>Job corresponds to any workflow of activities which are executed in the system to get a desired output. Each job is associated with a job id and job type.</p>\r\n<p><b>JobType:</b></p>\r\n<p>JobType corresponds to different job types supported by the system. This includes system defined & user-defined job types.</p>\r\n<p><b>ExtendedType:</b></p>\r\n<p>ExtendedType corresponds to the list of system & user-defined types in the system. This helps setup a new Sensor or Scene or Scenefile type in the system.</p>\r\n<p><b>Partner:</b></p>\r\n<p>Partner corresponds to the sensor/weather/imagery integration partner.</p>\r\n<p><b>Scene:</b></p>\r\n<p>Scene corresponds to any generated output in the context of a Farm. Each Scene has a scene id, scene source, scene type and farm id associated with it. Each scene id  can have multiple scene files associated with it.</p>\r\n<p><b>SceneFile:</b></p>\r\n<p>SceneFile corresponds to all files which are generated for single scene. A single scene id can have multiple SceneFile ids associated with it.</p>\r\n<p><b>Rule:</b></p>\r\n<p>Rule corresponds to a condition for farm-related data to trigger an alert. Each rule will be in the context of a farm's data.</p>\r\n<p><b>Alert:</b></p>\r\n<p>Alert corresponds to a notification which gets generated when a rule condition is met. Each alert will be in the context of a rule.</p>\r\n<p><b>RoleDefinition:</b></p>\r\n<p>RoleDefinition defines allowed and disallowed actions for a role.</p>\r\n<p><b>RoleAssignment:</b></p>\r\n<p>RoleAssignment corresponds to the assignment of a role to a user or a service principal.</p>\r\n<p><b>WeatherDataModel:</b></p>\r\n<p>WeatherDataModel corresponds to the metadata of the Weather Station such as name and weather measures such as Precipitation, Rainfall etc.</p>\r\n<p><b>WeatherDataLocation:</b></p>\r\n<p>WeatherDataLocation corresponds to the instance of Weather Station for a particular location (latitude/longitude).</p>\r\n</p>\r\n"
	},
	"schemes": [
		"https",
		"http"
	],
	"paths": {
		"/Alert": {
			"get": {
				"tags": [
					"Alert"
				],
				"summary": "Returns list of alerts.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "AlertGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "ruleIds",
						"in": "query",
						"description": "Gets or sets list of rule ids for which alerts are generated.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "deviceIds",
						"in": "query",
						"description": "Gets or sets list of device ids for which alerts are generated.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "severityLevels",
						"in": "query",
						"description": "Gets or sets list of rule severity levels.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Info",
								"Warning",
								"Critical"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "status",
						"in": "query",
						"description": "Gets or sets alert status.",
						"required": false,
						"type": "string",
						"enum": [
							"Open",
							"Acknowledged",
							"Closed"
						]
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in AlertResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"RuleActions"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/AlertResponseListResponse"
						}
					}
				}
			}
		},
		"/Alert/{id}": {
			"get": {
				"tags": [
					"Alert"
				],
				"summary": "Returns alert for the given id.",
				"operationId": "AlertGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the alert object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/AlertResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Alert"
				],
				"summary": "Updates the alert with given id.",
				"operationId": "AlertUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the alert.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Alert request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/AlertRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Device": {
			"get": {
				"tags": [
					"Device"
				],
				"summary": "Returns list of devices.",
				"operationId": "DeviceGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of devices.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "deviceModelIds",
						"in": "query",
						"description": "Gets or sets list of device model ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "farmIds",
						"in": "query",
						"description": "Gets or sets list of farm ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "parentDeviceIds",
						"in": "query",
						"description": "Gets or sets list of parent device ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "hardwareIds",
						"in": "query",
						"description": "Gets or sets list of hardware ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in DeviceResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/DeviceResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Device"
				],
				"summary": "Creates new device with given request body.",
				"operationId": "DeviceCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeviceRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/DeviceResponse"
						}
					}
				}
			}
		},
		"/Device/{id}": {
			"get": {
				"tags": [
					"Device"
				],
				"summary": "Returns device for the given Id.",
				"operationId": "DeviceGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/DeviceResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Device"
				],
				"summary": "Updates the device with given id.",
				"operationId": "DeviceUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the device.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "New device object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeviceRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Device"
				],
				"summary": "Deletes the device with given id and parameters.",
				"operationId": "DeviceDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "device id.",
						"required": true,
						"type": "string"
					},
					{
						"name": "force",
						"in": "query",
						"description": "Gets or sets a value indicating whether force delete is allowed.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/DeviceModel": {
			"get": {
				"tags": [
					"DeviceModel"
				],
				"summary": "Returns list of device models.",
				"operationId": "DeviceModelGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of device models.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "type",
						"in": "query",
						"description": "Gets or sets device type.",
						"required": false,
						"type": "string",
						"enum": [
							"Node",
							"Gateway"
						]
					},
					{
						"name": "manufactures",
						"in": "query",
						"description": "Gets or sets list of manufacturers.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "productCodes",
						"in": "query",
						"description": "Gets or sets list of product codes.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in DeviceModelResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Ports",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/DeviceModelResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"DeviceModel"
				],
				"summary": "Creates new device model with given request body.",
				"operationId": "DeviceModelCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Device Model object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeviceModelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/DeviceModelResponse"
						}
					}
				}
			}
		},
		"/DeviceModel/{id}": {
			"get": {
				"tags": [
					"DeviceModel"
				],
				"summary": "Returns device model for the given Id.",
				"operationId": "DeviceModelGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id of the Device Model object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/DeviceModelResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"DeviceModel"
				],
				"summary": "Updates the device model with given id.",
				"operationId": "DeviceModelUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id of the device model to be deleted.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Device Model Object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/DeviceModelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"DeviceModel"
				],
				"summary": "Deletes the device model with given id.",
				"operationId": "DeviceModelDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id of the Device Model to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/ExtendedType": {
			"get": {
				"tags": [
					"ExtendedType"
				],
				"summary": "Returns a list of extended types.",
				"operationId": "ExtendedTypeGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "keys",
						"in": "query",
						"description": "Gets or sets list of keys of extended type.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"SceneType",
								"SceneSource",
								"SceneFileContentType",
								"SceneFileType",
								"SensorMeasureType",
								"SensorMeasureUnit",
								"WeatherMeasureType",
								"WeatherMeasureUnit"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/ExtendedTypeResponseListResponse"
						}
					}
				}
			}
		},
		"/ExtendedType/{id}": {
			"get": {
				"tags": [
					"ExtendedType"
				],
				"summary": "Returns extended type for the given id.",
				"operationId": "ExtendedTypeGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id of the extended type.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/ExtendedTypeResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"ExtendedType"
				],
				"summary": "Updates existing extended type with given id. User should pass existing values plus required new values otherwise it will throw a BadRequest with HTTP status code 400.",
				"description": "If user is trying to modified system define values, API will throw BadRequest with HTTP status code 400.",
				"operationId": "ExtendedTypeUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "id of the extended type.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "extended type request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/ExtendedTypeRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Farm": {
			"get": {
				"tags": [
					"Farm"
				],
				"summary": "Returns list of farms.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "FarmGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of farms.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in FarmResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Geometry",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/FarmResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Farm"
				],
				"summary": "Creates new farm with given request body.",
				"operationId": "FarmCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Farm request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FarmRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/FarmResponse"
						}
					}
				}
			}
		},
		"/Farm/{id}": {
			"get": {
				"tags": [
					"Farm"
				],
				"summary": "Returns farm for the given id.",
				"operationId": "FarmGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the farm object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/FarmResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Farm"
				],
				"summary": "Updates the farm with given id.",
				"operationId": "FarmUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the farm.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Farm request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/FarmRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Farm"
				],
				"summary": "Deletes the farm with given id.",
				"operationId": "FarmDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the farm object.",
						"required": true,
						"type": "string"
					},
					{
						"name": "force",
						"in": "query",
						"description": "Gets or sets a value indicating whether force delete is allowed.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Job": {
			"get": {
				"tags": [
					"Job"
				],
				"summary": "Returns a list of jobs.",
				"operationId": "JobGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "typeIds",
						"in": "query",
						"description": "Gets or sets list of job type ids of jobs.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "states",
						"in": "query",
						"description": "Gets or sets list of job states of jobs.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Submitted",
								"Accepted",
								"Running",
								"PendingRetry",
								"Failed",
								"Succeeded",
								"Stopped"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of jobs which is specified while creating a job.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "parentJobIds",
						"in": "query",
						"description": "Gets or sets list of parent job ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in JobResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Arguments",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/JobResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Job"
				],
				"summary": "Creates new job with given request body.",
				"operationId": "JobCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "User's job request.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/JobRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/JobResponse"
						}
					}
				}
			}
		},
		"/Job/{id}": {
			"get": {
				"tags": [
					"Job"
				],
				"summary": "Returns job for the given id.",
				"operationId": "JobGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Job id (system-generated).",
						"required": true,
						"type": "string"
					},
					{
						"name": "debug",
						"in": "query",
						"description": "Flag indicating if debug info is required or not (Default: false).",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/JobResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"Job"
				],
				"summary": "Deletes job with given id.",
				"operationId": "JobDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of job to deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Job/{id}/stop": {
			"patch": {
				"tags": [
					"Job"
				],
				"summary": "Request to stop a job with given id.",
				"operationId": "JobStopJob",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of job that need to be stopped.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/JobResponse"
						}
					}
				}
			}
		},
		"/JobType": {
			"get": {
				"tags": [
					"JobType"
				],
				"summary": "Returns list of job types.",
				"operationId": "JobTypeGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of job types which is specified while creating a job type.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "status",
						"in": "query",
						"description": "Gets or sets status of Job Type.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Waiting",
								"Provisioning",
								"Failed",
								"PendingRetry",
								"Ready",
								"Obsolete"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in JobTypeResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"PipelineDetails",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/JobTypeResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"JobType"
				],
				"summary": "Creates new job type with given request body.",
				"operationId": "JobTypeCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "User's job type request.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/JobTypeRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/JobTypeResponse"
						}
					}
				}
			}
		},
		"/JobType/{id}": {
			"get": {
				"tags": [
					"JobType"
				],
				"summary": "Returns job type for the given id.",
				"operationId": "JobTypeGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "job type id (system-generated).",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/JobTypeResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"JobType"
				],
				"summary": "Updates job type with given id.",
				"operationId": "JobTypeUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of job type that need to be updated (system-generated).",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "New state of job type.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/JobTypeRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"JobType"
				],
				"summary": "Deletes job type with given id and parameters.",
				"operationId": "JobTypeDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of job type to deleted (system-generated).",
						"required": true,
						"type": "string"
					},
					{
						"name": "force",
						"in": "query",
						"description": "Gets or sets a value indicating whether force delete is allowed.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Partner": {
			"get": {
				"tags": [
					"Partner"
				],
				"summary": "Returns list of partners.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "PartnerGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of partner.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "objectIds",
						"in": "query",
						"description": "Gets or sets list of Object id's.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "partnerTypes",
						"in": "query",
						"description": "Gets or sets list of Partner Types.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Weather",
								"Imagery",
								"Sensor"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "tenantIds",
						"in": "query",
						"description": "Gets or sets list of Tenant id's.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in PartnerResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/PartnerLimitedResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Partner"
				],
				"summary": "Creates new partner with given request body.",
				"operationId": "PartnerCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Partner request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PartnerRequest"
						}
					}
				],
				"responses": {
					"202": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/PartnerResponse"
						}
					},
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/PartnerResponse"
						}
					}
				}
			}
		},
		"/Partner/{id}": {
			"get": {
				"tags": [
					"Partner"
				],
				"summary": "Returns partner for the given id.",
				"operationId": "PartnerGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the partner object.",
						"required": true,
						"type": "string"
					},
					{
						"name": "debug",
						"in": "query",
						"description": "Flag indicating if debug info is required or not (Default: false).",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/PartnerResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Partner"
				],
				"summary": "Updates the partner with given id.",
				"operationId": "PartnerUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the partner.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Partner request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/PartnerRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Partner"
				],
				"summary": "Deletes the partner with given id.",
				"operationId": "PartnerDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the partner object.",
						"required": true,
						"type": "string"
					},
					{
						"name": "force",
						"in": "query",
						"description": "Gets or sets a value indicating whether force delete is allowed.",
						"required": false,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					},
					"202": {
						"description": "Success"
					}
				}
			}
		},
		"/Partner/{id}/renew": {
			"patch": {
				"tags": [
					"Partner"
				],
				"summary": "Renew connection strings of event hub.",
				"operationId": "PartnerRenew",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of partner (system-generated).",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/PartnerResponse"
						}
					}
				}
			}
		},
		"/RoleAssignment": {
			"get": {
				"tags": [
					"RoleAssignment"
				],
				"summary": "Returns list of role assignments.",
				"description": "based on specified filters and date range.",
				"operationId": "RoleAssignmentGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "roleDefinitionIds",
						"in": "query",
						"description": "Gets or sets list of role ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "objectIds",
						"in": "query",
						"description": "Gets or sets list of object ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "objectIdTypes",
						"in": "query",
						"description": "Gets or sets list of object id types.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"UserId",
								"ServicePrincipalId"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "tenantIds",
						"in": "query",
						"description": "Gets or sets list of tenant ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RoleAssignmentResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"RoleAssignment"
				],
				"summary": "Creates new role assignment with given request body.",
				"operationId": "RoleAssignmentCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Role assignment request model.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/RoleAssignmentRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RoleAssignmentResponse"
						}
					}
				}
			}
		},
		"/RoleAssignment/{id}": {
			"get": {
				"tags": [
					"RoleAssignment"
				],
				"summary": "Returns role assignment for the given id.",
				"operationId": "RoleAssignmentGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Role assignment id given while creating a role assignment (system-generated).",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RoleAssignmentResponse"
						}
					}
				}
			},
			"delete": {
				"tags": [
					"RoleAssignment"
				],
				"summary": "Deletes the role assignment with given id.",
				"operationId": "RoleAssignmentDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of role assignment that need to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/RoleDefinition": {
			"get": {
				"tags": [
					"RoleDefinition"
				],
				"summary": "Returns list of role definitions.",
				"description": "based on specified filters and date range.",
				"operationId": "RoleDefinitionGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of role definitions.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RoleDefinitionResponseListResponse"
						}
					}
				}
			}
		},
		"/RoleDefinition/{id}": {
			"get": {
				"tags": [
					"RoleDefinition"
				],
				"summary": "Returns role definition for the given id.",
				"operationId": "RoleDefinitionGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Role definition id given while creating a role assignment (system-generated).",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RoleDefinitionResponse"
						}
					}
				}
			}
		},
		"/Rule": {
			"get": {
				"tags": [
					"Rule"
				],
				"summary": "Returns list of rules.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "RuleGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of rules.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "farmIds",
						"in": "query",
						"description": "Gets or sets list of farm id's.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "severityLevels",
						"in": "query",
						"description": "Gets or sets list of severity levels.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"Info",
								"Warning",
								"Critical"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ruleStatus",
						"in": "query",
						"description": "Gets or sets rule enabled.",
						"required": false,
						"type": "string",
						"enum": [
							"Enabled",
							"Disabled"
						]
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in RuleResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Actions",
								"Conditions",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RuleResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Rule"
				],
				"summary": "Creates new rule with given request body.",
				"operationId": "RuleCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Rule request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/RuleRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RuleResponse"
						}
					}
				}
			}
		},
		"/Rule/{id}": {
			"get": {
				"tags": [
					"Rule"
				],
				"summary": "Returns rule for the given id.",
				"operationId": "RuleGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the rule object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/RuleResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Rule"
				],
				"summary": "Updates the rule with given id.",
				"operationId": "RuleUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the rule.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Rule request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/RuleRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Rule"
				],
				"summary": "Deletes the rule with given id.",
				"operationId": "RuleDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the rule object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Scene": {
			"get": {
				"tags": [
					"Scene"
				],
				"summary": "Returns a list of scenes.",
				"operationId": "SceneGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "types",
						"in": "query",
						"description": "Gets or sets list of types of scenes.\r\n<remark>Refer /ExtendedType APIs with key \"SceneType\" for more information.</remark>",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "sources",
						"in": "query",
						"description": "Gets or sets list of sources of scenes.\r\n<remark>Refer /ExtendedType APIs with key \"SceneSource\" for more information.</remark>",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "farmId",
						"in": "query",
						"description": "Gets or sets farm id of scenes.",
						"required": false,
						"type": "string"
					},
					{
						"name": "sequence",
						"in": "query",
						"description": "Gets or sets sequence number of scenes.",
						"required": false,
						"type": "integer",
						"format": "int32"
					},
					{
						"name": "minSceneDate",
						"in": "query",
						"description": "Gets or sets minimum scene nominal date (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxSceneDate",
						"in": "query",
						"description": "Gets or sets maximum scene nominal date (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of scenes which is specified while creating a scene.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in SceneResponse.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SceneResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Scene"
				],
				"summary": "Creates new scene with given request body.",
				"operationId": "SceneCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "User's scene request.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SceneRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SceneResponse"
						}
					}
				}
			}
		},
		"/Scene/{id}": {
			"get": {
				"tags": [
					"Scene"
				],
				"summary": "Returns scene for the given id.",
				"operationId": "SceneGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "scene id (system-generated).",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SceneResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Scene"
				],
				"summary": "Updates scene with given id.",
				"operationId": "SceneUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of scene that need to be updated (system-generated).",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "New state of scene.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SceneRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Scene"
				],
				"summary": "Deletes scene with given id.",
				"operationId": "SceneDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of scene to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/SceneFile": {
			"get": {
				"tags": [
					"SceneFile"
				],
				"summary": "Returns list of scene file.",
				"description": "If generateDownloadSASUrl is true and there are more than 10 scene files then it will throw BadRequest with HTTP status code 400.",
				"operationId": "SceneFileGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "types",
						"in": "query",
						"description": "Gets or sets list of types of scene files.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileType\" for more information.</remark>",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "contentTypes",
						"in": "query",
						"description": "Gets or sets list of content types of scene files.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileContentType\" for more information.</remark>",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "sceneId",
						"in": "query",
						"description": "Gets or sets scene id of scene files.",
						"required": false,
						"type": "string"
					},
					{
						"name": "generateDownloadSASUrl",
						"in": "query",
						"description": "Gets or sets a value indicating whether download SAS URLs need to be generated.",
						"required": false,
						"type": "boolean",
						"default": false
					},
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of scene files which is specified while creating a scene file.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in SceneFileResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/GetSceneFileResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"SceneFile"
				],
				"summary": "Creates new scene file with given request body.",
				"description": "User need to use blobPath or uploadSASUrl to save actual content of file.",
				"operationId": "SceneFileCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "User's scene file request.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SceneFileRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/CreateSceneFileResponse"
						}
					}
				}
			}
		},
		"/SceneFile/{id}": {
			"get": {
				"tags": [
					"SceneFile"
				],
				"summary": "Returns scene file for the given id.",
				"operationId": "SceneFileGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "scene file id (system-generated).",
						"required": true,
						"type": "string"
					},
					{
						"name": "generateDownloadSASUrl",
						"in": "query",
						"description": "Specify if SAS URL need to be generated to download content of a file (Default: false).",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/GetSceneFileResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"SceneFile"
				],
				"summary": "Updates scene file with given id.",
				"operationId": "SceneFileUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of scene file to be updated.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "New state of scene file.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SceneFileRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"SceneFile"
				],
				"summary": "Deletes scene file with given id.",
				"operationId": "SceneFileDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of scene file to be deleted.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Sensor": {
			"get": {
				"tags": [
					"Sensor"
				],
				"summary": "Returns list of sensors.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "SensorGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of sensors.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "hardwareIds",
						"in": "query",
						"description": "Gets or sets list of hardware id's.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "sensorModelIds",
						"in": "query",
						"description": "Gets or sets list of sensor models id's.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "deviceIds",
						"in": "query",
						"description": "Gets or sets list of device id's.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in SensorResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SensorResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"Sensor"
				],
				"summary": "Creates new sensor with given request body.",
				"operationId": "SensorCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Sensor request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SensorRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SensorResponse"
						}
					}
				}
			}
		},
		"/Sensor/{id}": {
			"get": {
				"tags": [
					"Sensor"
				],
				"summary": "Returns sensor for the given id.",
				"operationId": "SensorGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the sensor object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SensorResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"Sensor"
				],
				"summary": "Updates the sensor with given id.",
				"operationId": "SensorUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the sensor.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Sensor request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SensorRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"Sensor"
				],
				"summary": "Deletes the sensor with given id.",
				"operationId": "SensorDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the sensor object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/SensorModel": {
			"get": {
				"tags": [
					"SensorModel"
				],
				"summary": "Returns list of sensor models.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "SensorModelGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "manufacturers",
						"in": "query",
						"description": "Gets or sets list of manufacturers.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "productCodes",
						"in": "query",
						"description": "Gets or sets list of product codes.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of sensor models.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in SensorModelResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties",
								"SensorMeasures"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SensorModelResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"SensorModel"
				],
				"summary": "Creates new sensor model with given request body.",
				"operationId": "SensorModelCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Sensor model request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SensorModelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SensorModelResponse"
						}
					}
				}
			}
		},
		"/SensorModel/{id}": {
			"get": {
				"tags": [
					"SensorModel"
				],
				"summary": "Returns sensor model for the given id.",
				"operationId": "SensorModelGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the sensor model object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/SensorModelResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"SensorModel"
				],
				"summary": "Updates the sensor model with given id.",
				"operationId": "SensorModelUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the sensor model.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Sensor model request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/SensorModelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"SensorModel"
				],
				"summary": "Deletes the sensor model with given id.",
				"operationId": "SensorModelDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the sensor model object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/Telemetry": {
			"post": {
				"tags": [
					"Telemetry"
				],
				"summary": "Returns list of telemetry messages.",
				"description": "based on specified filters. Requires ReadAll privileges.",
				"operationId": "TelemetryGetAll",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "queryFilter",
						"in": "body",
						"description": "Telemetry query filter object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/TelemetryQueryFilter"
						}
					},
					{
						"name": "removeDuplicateData",
						"in": "query",
						"description": "Flag to remove duplicate Telemetry data. Applicable only for weather data.",
						"required": false,
						"type": "boolean"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/QueryResultPage"
						}
					}
				}
			}
		},
		"/WeatherDataLocation": {
			"get": {
				"tags": [
					"WeatherDataLocation"
				],
				"summary": "Returns list of weather data locations.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "WeatherDataLocationGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of weather data locations.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "farmIds",
						"in": "query",
						"description": "Gets or sets list of Farm Ids.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "weatherDataModelIds",
						"in": "query",
						"description": "Gets or sets list of weather data models id's.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in WeatherDataLocationResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/WeatherDataLocationResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"WeatherDataLocation"
				],
				"summary": "Creates new weather data location with given request body.",
				"operationId": "WeatherDataLocationCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Weather data location request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/WeatherDataLocationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/WeatherDataLocationResponse"
						}
					}
				}
			}
		},
		"/WeatherDataLocation/{id}": {
			"get": {
				"tags": [
					"WeatherDataLocation"
				],
				"summary": "Returns weather data location for the given id.",
				"operationId": "WeatherDataLocationGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the weather data location object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/WeatherDataLocationResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"WeatherDataLocation"
				],
				"summary": "Updates the weather data location with given id.",
				"operationId": "WeatherDataLocationUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the weather data location.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Weather data location request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/WeatherDataLocationRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"WeatherDataLocation"
				],
				"summary": "Deletes the weather data location with given id.",
				"operationId": "WeatherDataLocationDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the weather data location object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		},
		"/WeatherDataModel": {
			"get": {
				"tags": [
					"WeatherDataModel"
				],
				"summary": "Returns list of weather data models.",
				"description": "based on specified filters and date range. Requires ReadAll privileges.",
				"operationId": "WeatherDataModelGetAll",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "names",
						"in": "query",
						"description": "Gets or sets list of names of weather data models.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "includes",
						"in": "query",
						"description": "Gets or sets list of properties to be included in WeatherDataModelResponse. Default value is None.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string",
							"enum": [
								"None",
								"Properties",
								"WeatherMeasures"
							]
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Gets or sets ids of the resource.",
						"required": false,
						"type": "array",
						"items": {
							"type": "string"
						},
						"collectionFormat": "multi",
						"uniqueItems": false
					},
					{
						"name": "PartnerId",
						"in": "query",
						"description": "Gets or sets id of the partner.",
						"required": false,
						"type": "string"
					},
					{
						"name": "minCreatedAt",
						"in": "query",
						"description": "Gets or sets minimum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxCreatedAt",
						"in": "query",
						"description": "Gets or sets maximum creation date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "minLastModifiedAt",
						"in": "query",
						"description": "Gets or sets minimum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "maxLastModifiedAt",
						"in": "query",
						"description": "Gets or sets maximum last modified date of resource (inclusive).",
						"required": false,
						"type": "string",
						"format": "date-time"
					},
					{
						"name": "propertyFilter",
						"in": "query",
						"description": "Gets or sets property filter query.eg. \"x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false\".\r\nOnly AND operation is supported.\r\nSupported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.",
						"required": false,
						"type": "string"
					},
					{
						"name": "maxItems",
						"in": "query",
						"description": "Gets or sets maximum number of items needed (inclusive).\r\nMaximum items = 1000.",
						"required": false,
						"type": "integer",
						"format": "int32",
						"maximum": 1000.0,
						"minimum": 1.0,
						"default": 50
					},
					{
						"name": "x-ms-continuation",
						"in": "header",
						"description": "Gets or sets continuation token.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/WeatherDataModelResponseListResponse"
						}
					}
				}
			},
			"post": {
				"tags": [
					"WeatherDataModel"
				],
				"summary": "Creates new weather data model with given request body.",
				"operationId": "WeatherDataModelCreate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "input",
						"in": "body",
						"description": "Weather data model request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/WeatherDataModelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/WeatherDataModelResponse"
						}
					}
				}
			}
		},
		"/WeatherDataModel/{id}": {
			"get": {
				"tags": [
					"WeatherDataModel"
				],
				"summary": "Returns weather data model for the given id.",
				"operationId": "WeatherDataModelGet",
				"consumes": [],
				"produces": [
					"text/plain",
					"application/json",
					"text/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the weather data model object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"schema": {
							"$ref": "#/definitions/WeatherDataModelResponse"
						}
					}
				}
			},
			"put": {
				"tags": [
					"WeatherDataModel"
				],
				"summary": "Updates the weather data model with given id.",
				"operationId": "WeatherDataModelUpdate",
				"consumes": [
					"application/json-patch+json",
					"application/json",
					"text/json",
					"application/*+json"
				],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the weather data model.",
						"required": true,
						"type": "string"
					},
					{
						"name": "input",
						"in": "body",
						"description": "Weather data model request object.",
						"required": false,
						"schema": {
							"$ref": "#/definitions/WeatherDataModelRequest"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			},
			"delete": {
				"tags": [
					"WeatherDataModel"
				],
				"summary": "Deletes the weather data model with given id.",
				"operationId": "WeatherDataModelDelete",
				"consumes": [],
				"produces": [],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Id of the weather data model object.",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Success"
					}
				}
			}
		}
	},
	"definitions": {
		"AlertResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/AlertResponse"
					}
				}
			}
		},
		"AlertResponse": {
			"description": "Defines Alert Response model.",
			"required": [
				"id",
				"ruleId",
				"deviceId",
				"status"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the alert.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets alert creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets alert last updated date.",
					"type": "string"
				},
				"ruleDescription": {
					"description": "Gets or sets rule description.",
					"type": "string"
				},
				"ruleSeverity": {
					"description": "Gets or sets rule severity.",
					"enum": [
						"Info",
						"Warning",
						"Critical"
					],
					"type": "string"
				},
				"ruleId": {
					"description": "Gets or sets rule id.",
					"type": "string"
				},
				"ruleActions": {
					"description": "Gets or sets rule actions.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/IAction"
					}
				},
				"deviceId": {
					"description": "Gets or sets device id in a rule.",
					"type": "string"
				},
				"deviceMsgReceived": {
					"format": "date-time",
					"description": "Gets or sets last message received time.",
					"type": "string"
				},
				"status": {
					"description": "Gets or sets a value indicating whether Alert is acknowledged.",
					"enum": [
						"Open",
						"Acknowledged",
						"Closed"
					],
					"type": "string"
				}
			}
		},
		"IAction": {
			"description": "Rule action interface.",
			"type": "object",
			"properties": {
				"type": {
					"description": "Gets action type for rule.",
					"enum": [
						"Email"
					],
					"type": "string",
					"readOnly": true
				},
				"parameters": {
					"description": "Gets parameters of Action\r\nNote: Parameters should always be initialized as a case-insensitive dictionary.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					},
					"readOnly": true
				}
			}
		},
		"AlertRequest": {
			"description": "Defines Alert Request model.",
			"required": [
				"status"
			],
			"type": "object",
			"properties": {
				"status": {
					"description": "Gets or sets a value indicating whether Alert is acknowledged.",
					"enum": [
						"Open",
						"Acknowledged",
						"Closed"
					],
					"type": "string"
				}
			}
		},
		"DeviceResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceResponse"
					}
				}
			}
		},
		"DeviceResponse": {
			"required": [
				"status",
				"deviceModelId",
				"hardwareId",
				"name"
			],
			"type": "object",
			"properties": {
				"status": {
					"description": "Gets or sets indicates the status of the device as follows: Online - When a provisioned device is having network connectivity, Offline - When a provisioned device is not having network connectivity.",
					"enum": [
						"Offline",
						"Online"
					],
					"type": "string"
				},
				"id": {
					"description": "Gets or sets unique id auto generated for the device.",
					"type": "string"
				},
				"lastTelemetryRcdAt": {
					"format": "date-time",
					"description": "Gets or sets last telemetry received time stamp.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets device creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets device last modified date.",
					"type": "string"
				},
				"deviceModelId": {
					"description": "Gets or sets id of the associated Device Model.",
					"type": "string"
				},
				"hardwareId": {
					"description": "Gets or sets unique id for the device such as MAC address etc.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"farmId": {
					"description": "Gets or sets id of the farm to which the device is provisioned to.\r\nSensor Partners needs to ignore this field while creating and need to pass the old value while updating device.",
					"type": "string"
				},
				"reportingInterval": {
					"format": "int32",
					"description": "Gets or sets reporting interval of telemetry in seconds.",
					"maximum": 2147483647.0,
					"minimum": 0.0,
					"type": "integer"
				},
				"location": {
					"$ref": "#/definitions/Location",
					"description": "Gets or sets location of the Device."
				},
				"parentDeviceId": {
					"description": "Gets or sets id of the parent device to which this device is connected to.\r\nEg.A Node connected to a Gateway; Node will have parentDeviceId as the Gateway.",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"Location": {
			"required": [
				"latitude",
				"longitude"
			],
			"type": "object",
			"properties": {
				"latitude": {
					"format": "double",
					"description": "Gets or sets latitude coordinate.",
					"maximum": 90.0,
					"minimum": -90.0,
					"type": "number"
				},
				"longitude": {
					"format": "double",
					"description": "Gets or sets longitude coordinate.",
					"maximum": 180.0,
					"minimum": -180.0,
					"type": "number"
				},
				"elevation": {
					"format": "double",
					"description": "Gets or sets elevation specified in meters.",
					"type": "number"
				}
			}
		},
		"DeviceRequest": {
			"required": [
				"deviceModelId",
				"hardwareId",
				"name"
			],
			"type": "object",
			"properties": {
				"deviceModelId": {
					"description": "Gets or sets id of the associated Device Model.",
					"type": "string"
				},
				"hardwareId": {
					"description": "Gets or sets unique id for the device such as MAC address etc.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"farmId": {
					"description": "Gets or sets id of the farm to which the device is provisioned to.\r\nSensor Partners needs to ignore this field while creating and need to pass the old value while updating device.",
					"type": "string"
				},
				"reportingInterval": {
					"format": "int32",
					"description": "Gets or sets reporting interval of telemetry in seconds.",
					"maximum": 2147483647.0,
					"minimum": 0.0,
					"type": "integer"
				},
				"location": {
					"$ref": "#/definitions/Location",
					"description": "Gets or sets location of the Device."
				},
				"parentDeviceId": {
					"description": "Gets or sets id of the parent device to which this device is connected to.\r\nEg.A Node connected to a Gateway; Node will have parentDeviceId as the Gateway.",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"DeviceModelResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/DeviceModelResponse"
					}
				}
			}
		},
		"DeviceModelResponse": {
			"description": "Device Model Response Object.",
			"required": [
				"id",
				"type",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the device type.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets device type creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets device type last updated date.",
					"type": "string"
				},
				"type": {
					"description": "Gets or sets type of the device.",
					"enum": [
						"Node",
						"Gateway"
					],
					"type": "string"
				},
				"manufacturer": {
					"description": "Gets or sets manufacturer name of the device.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"productCode": {
					"description": "Gets or sets Device product code Or Model name/Number.\r\neg: EnviroMonitor#6800.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"ports": {
					"description": "Gets or sets details of ports mapped on the device.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/DevicePort"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"DevicePort": {
			"required": [
				"name",
				"type"
			],
			"type": "object",
			"properties": {
				"name": {
					"description": "Gets or sets port name on the device.",
					"maxLength": 100,
					"minLength": 1,
					"type": "string"
				},
				"type": {
					"description": "Gets or sets port type of the device.",
					"enum": [
						"Analog",
						"Digital"
					],
					"type": "string"
				}
			}
		},
		"DeviceModelRequest": {
			"description": "Device Model Request Object.",
			"required": [
				"type",
				"name"
			],
			"type": "object",
			"properties": {
				"type": {
					"description": "Gets or sets type of the device.",
					"enum": [
						"Node",
						"Gateway"
					],
					"type": "string"
				},
				"manufacturer": {
					"description": "Gets or sets manufacturer name of the device.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"productCode": {
					"description": "Gets or sets Device product code Or Model name/Number.\r\neg: EnviroMonitor#6800.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"ports": {
					"description": "Gets or sets details of ports mapped on the device.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/DevicePort"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"ExtendedTypeResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/ExtendedTypeResponse"
					}
				}
			}
		},
		"ExtendedTypeResponse": {
			"description": "Extended JobTypeId Response.",
			"required": [
				"key",
				"value"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for extended type.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets farm creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets farm last updated date.",
					"type": "string"
				},
				"key": {
					"description": "Gets or sets key of extended type (user and system defined).",
					"enum": [
						"SceneType",
						"SceneSource",
						"SceneFileContentType",
						"SceneFileType",
						"SensorMeasureType",
						"SensorMeasureUnit",
						"WeatherMeasureType",
						"WeatherMeasureUnit"
					],
					"type": "string"
				},
				"value": {
					"description": "Gets or sets type values associated with the key (user and system defined).",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				}
			}
		},
		"ExtendedTypeRequest": {
			"description": "Extended type user request.",
			"required": [
				"key",
				"value"
			],
			"type": "object",
			"properties": {
				"key": {
					"description": "Gets or sets key of extended type (user and system defined).",
					"enum": [
						"SceneType",
						"SceneSource",
						"SceneFileContentType",
						"SceneFileType",
						"SensorMeasureType",
						"SensorMeasureUnit",
						"WeatherMeasureType",
						"WeatherMeasureUnit"
					],
					"type": "string"
				},
				"value": {
					"description": "Gets or sets type values associated with the key (user and system defined).",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				}
			}
		},
		"FarmResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/FarmResponse"
					}
				}
			}
		},
		"FarmResponse": {
			"required": [
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the farm.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets farm creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets farm last updated date.",
					"type": "string"
				},
				"geometry": {
					"$ref": "#/definitions/IGeoJSONObject",
					"description": "Gets or sets geometry of the farm specified as GeoJson."
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"IGeoJSONObject": {
			"required": [
				"type"
			],
			"type": "object",
			"properties": {
				"type": {
					"enum": [
						"Polygon",
						"MultiPolygon"
					],
					"type": "string"
				}
			},
			"discriminator": "type"
		},
		"FarmRequest": {
			"required": [
				"name"
			],
			"type": "object",
			"properties": {
				"geometry": {
					"$ref": "#/definitions/IGeoJSONObject",
					"description": "Gets or sets geometry of the farm specified as GeoJson."
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			},
			"example": {
				"geometry": {
					"type": "Polygon",
					"coordinates": [
						[
							[
								73.704571723937988,
								20.545385304358106
							],
							[
								73.704485893249512,
								20.542411534243367
							],
							[
								73.70877742767334,
								20.541688176010233
							],
							[
								73.710236549377441,
								20.545083911372505
							],
							[
								73.706631660461426,
								20.546992723579137
							],
							[
								73.704571723937988,
								20.545385304358106
							]
						]
					]
				},
				"name": "string",
				"description": "string",
				"properties": {}
			}
		},
		"JobResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/JobResponse"
					}
				}
			}
		},
		"JobResponse": {
			"description": "Model to define complete state of job in the system.",
			"required": [
				"typeId",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets system generated unique id.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets job's creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets job's last modified date.",
					"type": "string"
				},
				"stopRequested": {
					"description": "Gets or sets a value indicating whether flag indicating stop is requested by user or not.",
					"type": "boolean"
				},
				"currentState": {
					"description": "Gets or sets current state of job.",
					"enum": [
						"Submitted",
						"Accepted",
						"Running",
						"PendingRetry",
						"Failed",
						"Succeeded",
						"Stopped"
					],
					"type": "string"
				},
				"error": {
					"description": "Gets or sets error message if any.\r\n<remarks>\r\nThis field is going be deprecated in favor of Status which has more detailed information.\r\n</remarks>",
					"type": "string"
				},
				"status": {
					"$ref": "#/definitions/JobStatus",
					"description": "Gets or sets job's status."
				},
				"debugInfo": {
					"$ref": "#/definitions/DebugInformation",
					"description": "Gets or sets debug information if any."
				},
				"info": {
					"$ref": "#/definitions/JobInfo",
					"description": "Gets or sets stats or information about a job."
				},
				"typeId": {
					"description": "Gets or sets Job type id for user-defined or system defined jobs.\r\n<remarks>Refer /JobType APIs for more information.</remarks>",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"arguments": {
					"description": "Gets or sets job specific arguments specified in the corresponding Job Type.\r\n<remarks>\r\nIf arguments are not in the format expected by the Job Type, you get a BAD Request.\r\nThese arguments will be passed directly  to the Azure Data Factory Pipeline run.\r\n</remarks>",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				},
				"parentJobId": {
					"description": "Gets or sets specify parent job id for this job.\r\n<remarks>\r\nIf there is no parent of a job then it should be set to null.\r\nIt is user's responsibility to set correct parent job id for better job tracking and monitoring.\r\n</remarks>",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"JobStatus": {
			"type": "object",
			"properties": {
				"isSuccess": {
					"type": "boolean"
				},
				"progressPercentage": {
					"format": "double",
					"type": "number"
				},
				"error": {
					"$ref": "#/definitions/JobError"
				},
				"output": {
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"DebugInformation": {
			"description": "Debug information about a job.",
			"type": "object",
			"properties": {
				"pipelineRuns": {
					"description": "Gets or sets information about ADF pipeline runs of job.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/PipelineRun"
					}
				}
			}
		},
		"JobInfo": {
			"description": "More information about a job.",
			"type": "object",
			"properties": {
				"totalRuns": {
					"format": "int32",
					"description": "Gets or sets total number of ADF pipeline runs.",
					"type": "integer"
				},
				"timeTakenHours": {
					"format": "double",
					"description": "Gets or sets total number of hours taken by job to be completed .",
					"type": "number"
				}
			}
		},
		"JobError": {
			"type": "object",
			"properties": {
				"code": {
					"type": "string"
				},
				"message": {
					"type": "string"
				},
				"isTransient": {
					"type": "boolean"
				}
			}
		},
		"PipelineRun": {
			"type": "object",
			"properties": {
				"runId": {
					"type": "string"
				},
				"pipelineName": {
					"type": "string"
				},
				"parameters": {
					"type": "object",
					"additionalProperties": {
						"type": "string"
					}
				},
				"lastUpdated": {
					"format": "date-time",
					"type": "string"
				},
				"runStart": {
					"format": "date-time",
					"type": "string"
				},
				"runEnd": {
					"format": "date-time",
					"type": "string"
				},
				"durationInMs": {
					"format": "int32",
					"type": "integer"
				},
				"status": {
					"type": "string"
				},
				"message": {
					"type": "string"
				}
			}
		},
		"JobRequest": {
			"description": "Model to define a job input in the system.",
			"required": [
				"typeId",
				"name"
			],
			"type": "object",
			"properties": {
				"typeId": {
					"description": "Gets or sets Job type id for user-defined or system defined jobs.\r\n<remarks>Refer /JobType APIs for more information.</remarks>",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"arguments": {
					"description": "Gets or sets job specific arguments specified in the corresponding Job Type.\r\n<remarks>\r\nIf arguments are not in the format expected by the Job Type, you get a BAD Request.\r\nThese arguments will be passed directly  to the Azure Data Factory Pipeline run.\r\n</remarks>",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				},
				"parentJobId": {
					"description": "Gets or sets specify parent job id for this job.\r\n<remarks>\r\nIf there is no parent of a job then it should be set to null.\r\nIt is user's responsibility to set correct parent job id for better job tracking and monitoring.\r\n</remarks>",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"JobTypeResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/JobTypeResponse"
					}
				}
			}
		},
		"JobTypeResponse": {
			"description": "Job type response API model.",
			"required": [
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id of job type.",
					"type": "string"
				},
				"status": {
					"description": "Gets or sets status of JobType.\r\nThis status represents whether or not corresponding ADF pipeline has been successfully created.",
					"enum": [
						"Waiting",
						"Provisioning",
						"Failed",
						"PendingRetry",
						"Ready",
						"Obsolete"
					],
					"type": "string"
				},
				"errorMessage": {
					"description": "Gets or sets error message.\r\nHelps in debugging for the Partner JobTypes.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets created date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets last modified date.",
					"type": "string"
				},
				"pipelineDetails": {
					"$ref": "#/definitions/PipelineDetails",
					"description": "Gets or sets azure Data Factory pipeline specific details."
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"PipelineDetails": {
			"description": "Wrapper class to keep all information related to a pipeline.",
			"type": "object",
			"properties": {
				"resourceGroupName": {
					"description": "Gets or sets user may have multiple resource groups which must be registered with us.\r\nSpecify valid Resource Group Name where a desired pipeline is created.",
					"maxLength": 90,
					"minLength": 1,
					"type": "string"
				},
				"dataFactoryName": {
					"description": "Gets or sets user may have multiple Data Factory resources which must be registered with us.\r\nSpecify valid Data Factory Name where a desired pipeline is created.",
					"maxLength": 63,
					"minLength": 3,
					"type": "string"
				},
				"pipelineName": {
					"description": "Gets or sets Data Factory V2 pipeline name.",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"parameters": {
					"description": "Gets or sets specify list of allowed pipeline parameters\r\nso that our system can put some validations while submitting a job.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/Parameter"
					}
				}
			}
		},
		"Parameter": {
			"required": [
				"name",
				"type"
			],
			"type": "object",
			"properties": {
				"name": {
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"type": {
					"enum": [
						"String",
						"Int",
						"Float",
						"Bool",
						"Array"
					],
					"type": "string"
				},
				"isRequired": {
					"default": true,
					"type": "boolean",
					"example": true
				},
				"defaultValue": {
					"type": "object"
				},
				"description": {
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				}
			}
		},
		"JobTypeRequest": {
			"description": "Job type request API model.",
			"required": [
				"name"
			],
			"type": "object",
			"properties": {
				"pipelineDetails": {
					"$ref": "#/definitions/PipelineDetails",
					"description": "Gets or sets azure Data Factory pipeline specific details."
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"PartnerLimitedResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/PartnerLimitedResponse"
					}
				}
			}
		},
		"PartnerLimitedResponse": {
			"description": "Partner response model without connection strings.",
			"required": [
				"partnerType",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id of role assignment.",
					"type": "string"
				},
				"dockerDetails": {
					"$ref": "#/definitions/DockerLimitedDetails",
					"description": "Gets or sets partner docker details."
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets role assignment creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets role assignment last updated date.",
					"type": "string"
				},
				"debugInfo": {
					"description": "Gets or sets debug information if any.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/PartnerDebugInfo"
					}
				},
				"status": {
					"description": "Gets or sets current Status of the Partner.",
					"enum": [
						"Active",
						"Waiting",
						"Initializing",
						"PendingRetry",
						"Failed",
						"Updating",
						"PendingDelete",
						"Deleting"
					],
					"type": "string"
				},
				"error": {
					"description": "Gets or sets details of errors while doing Partner operations.",
					"type": "string"
				},
				"objectId": {
					"description": "Gets or sets objectId of the partner.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"tenantId": {
					"description": "Gets or sets tenantId of the partner.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"partnerType": {
					"description": "Gets or sets partner type.",
					"enum": [
						"Weather",
						"Imagery",
						"Sensor"
					],
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"DockerLimitedDetails": {
			"description": "Docker model without docker credentials.",
			"required": [
				"imageName",
				"imageTag",
				"azureBatchVMDetails"
			],
			"type": "object",
			"properties": {
				"imageName": {
					"description": "Gets or sets docker image name.",
					"default": "azurefarmbeats/farmbeats-noaa",
					"maxLength": 300,
					"minLength": 3,
					"type": "string",
					"example": "azurefarmbeats/farmbeats-noaa"
				},
				"imageTag": {
					"description": "Gets or sets docker image tag.",
					"default": "latest",
					"maxLength": 300,
					"minLength": 3,
					"type": "string",
					"example": "latest"
				},
				"azureBatchVMDetails": {
					"$ref": "#/definitions/AzureBatchDetails",
					"description": "Gets or sets Azure batch details to run the docker image."
				}
			}
		},
		"PartnerDebugInfo": {
			"type": "object",
			"properties": {
				"action": {
					"enum": [
						"InitStarted",
						"UpdationStarted",
						"RoleAssignmentCompleted",
						"RoleAssignmentFailed",
						"BatchPoolCreated",
						"BatchPoolCreationFailed",
						"BootstrapCompleted",
						"BootstrapFailed",
						"PipelinesCreated",
						"PipelinesCreationFailed",
						"Provisioned",
						"DeletionStarted",
						"RoleAssignmentDeleted",
						"RoleAssignmentDeletionFailed",
						"BatchPoolDeleted",
						"BatchPoolDeletionFailed",
						"BootstrapJobDeleted",
						"BootstrapJobDeletionFailed",
						"PipelinesDeleted",
						"PipelinesDeletionFailed"
					],
					"type": "string"
				},
				"actionDateTime": {
					"format": "date-time",
					"type": "string"
				}
			}
		},
		"AzureBatchDetails": {
			"description": "Docker image hosting details.",
			"required": [
				"batchVMSKU",
				"nodeAgentSKUID"
			],
			"type": "object",
			"properties": {
				"batchVMSKU": {
					"description": "Gets or sets Azure Batch VM SKU.\r\nCurrently we only support linux VMs.\r\nList of VM SKUs: https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-sizes-specs.",
					"default": "standard_d3_v2",
					"type": "string",
					"example": "standard_d3_v2"
				},
				"dedicatedComputerNodes": {
					"format": "int32",
					"description": "Gets or sets dedicated computer nodes for batch pool.",
					"default": 1,
					"type": "integer",
					"example": 1
				},
				"nodeAgentSKUID": {
					"description": "Gets or sets Azure Batch Node Agent SKU ID.\r\nCurrently only \"batch.node.ubuntu 18.04\" batch node agent is supported.",
					"default": "batch.node.ubuntu 18.04",
					"type": "string",
					"example": "batch.node.ubuntu 18.04"
				}
			}
		},
		"PartnerRequest": {
			"description": "Role Assignment request model.",
			"required": [
				"partnerType",
				"name"
			],
			"type": "object",
			"properties": {
				"dockerDetails": {
					"$ref": "#/definitions/DockerDetails",
					"description": "Gets or sets partner docker details."
				},
				"partnerCredentials": {
					"description": "Gets or sets credentials for calling partner API referred in docker.",
					"type": "object",
					"additionalProperties": {
						"type": "string"
					}
				},
				"objectId": {
					"description": "Gets or sets objectId of the partner.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"tenantId": {
					"description": "Gets or sets tenantId of the partner.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"partnerType": {
					"description": "Gets or sets partner type.",
					"enum": [
						"Weather",
						"Imagery",
						"Sensor"
					],
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"DockerDetails": {
			"description": "Docker image hosting details.",
			"required": [
				"imageName",
				"imageTag",
				"azureBatchVMDetails"
			],
			"type": "object",
			"properties": {
				"credentials": {
					"$ref": "#/definitions/Credentials",
					"description": "Gets or sets credentials required for docker login."
				},
				"imageName": {
					"description": "Gets or sets docker image name.",
					"default": "azurefarmbeats/farmbeats-noaa",
					"maxLength": 300,
					"minLength": 3,
					"type": "string",
					"example": "azurefarmbeats/farmbeats-noaa"
				},
				"imageTag": {
					"description": "Gets or sets docker image tag.",
					"default": "latest",
					"maxLength": 300,
					"minLength": 3,
					"type": "string",
					"example": "latest"
				},
				"azureBatchVMDetails": {
					"$ref": "#/definitions/AzureBatchDetails",
					"description": "Gets or sets Azure batch details to run the docker image."
				}
			}
		},
		"Credentials": {
			"description": "Credentials required for docker login.",
			"required": [
				"username",
				"password"
			],
			"type": "object",
			"properties": {
				"username": {
					"description": "Gets or sets username for docker login.",
					"type": "string"
				},
				"password": {
					"description": "Gets or sets password for docker login.",
					"type": "string"
				}
			}
		},
		"PartnerResponse": {
			"description": "Partner response model with connection strings.",
			"required": [
				"partnerType",
				"name"
			],
			"type": "object",
			"properties": {
				"primaryEventHubConnectionString": {
					"description": "Gets primary Event Hub connectionString for partner integration as applicable.",
					"type": "string"
				},
				"secondaryEventHubConnectionString": {
					"description": "Gets secondary Event Hub connectionString for partner integration as applicable.",
					"type": "string"
				},
				"id": {
					"description": "Gets or sets unique id of role assignment.",
					"type": "string"
				},
				"dockerDetails": {
					"$ref": "#/definitions/DockerLimitedDetails",
					"description": "Gets or sets partner docker details."
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets role assignment creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets role assignment last updated date.",
					"type": "string"
				},
				"debugInfo": {
					"description": "Gets or sets debug information if any.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/PartnerDebugInfo"
					}
				},
				"status": {
					"description": "Gets or sets current Status of the Partner.",
					"enum": [
						"Active",
						"Waiting",
						"Initializing",
						"PendingRetry",
						"Failed",
						"Updating",
						"PendingDelete",
						"Deleting"
					],
					"type": "string"
				},
				"error": {
					"description": "Gets or sets details of errors while doing Partner operations.",
					"type": "string"
				},
				"objectId": {
					"description": "Gets or sets objectId of the partner.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"tenantId": {
					"description": "Gets or sets tenantId of the partner.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"partnerType": {
					"description": "Gets or sets partner type.",
					"enum": [
						"Weather",
						"Imagery",
						"Sensor"
					],
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"RoleAssignmentRequest": {
			"description": "Role Assignment request model.",
			"required": [
				"roleDefinitionId",
				"objectId",
				"objectIdType",
				"tenantId"
			],
			"type": "object",
			"properties": {
				"roleDefinitionId": {
					"description": "Gets or sets roleDefinitionId of the role assignment.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"objectId": {
					"description": "Gets or sets objectId of the role assignment.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"objectIdType": {
					"description": "Gets or sets objectIdType of the role assignment.",
					"enum": [
						"UserId",
						"ServicePrincipalId"
					],
					"type": "string"
				},
				"tenantId": {
					"description": "Gets or sets tenantId of the role assignment.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				}
			}
		},
		"RoleAssignmentResponse": {
			"description": "Role Assignment response model.",
			"required": [
				"roleDefinitionId",
				"objectId",
				"objectIdType",
				"tenantId"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id of role assignment.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets role assignment creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets role assignment last updated date.",
					"type": "string"
				},
				"roleDefinitionId": {
					"description": "Gets or sets roleDefinitionId of the role assignment.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"objectId": {
					"description": "Gets or sets objectId of the role assignment.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"objectIdType": {
					"description": "Gets or sets objectIdType of the role assignment.",
					"enum": [
						"UserId",
						"ServicePrincipalId"
					],
					"type": "string"
				},
				"tenantId": {
					"description": "Gets or sets tenantId of the role assignment.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				}
			}
		},
		"RoleAssignmentResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/RoleAssignmentResponse"
					}
				}
			}
		},
		"RoleDefinitionResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/RoleDefinitionResponse"
					}
				}
			}
		},
		"RoleDefinitionResponse": {
			"description": "Role Definition response model.",
			"required": [
				"permissions",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id of role definition.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets role definition creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets role definition last updated date.",
					"type": "string"
				},
				"permissions": {
					"description": "Gets or sets permissions of the role definition.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/Permission"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"Permission": {
			"required": [
				"actions",
				"resourceTypes"
			],
			"type": "object",
			"properties": {
				"notActions": {
					"uniqueItems": false,
					"type": "array",
					"items": {
						"enum": [
							"All",
							"GET",
							"POST",
							"PUT",
							"PATCH",
							"DELETE"
						],
						"type": "string"
					}
				},
				"actions": {
					"uniqueItems": false,
					"type": "array",
					"items": {
						"enum": [
							"All",
							"GET",
							"POST",
							"PUT",
							"PATCH",
							"DELETE"
						],
						"type": "string"
					}
				},
				"resourceTypes": {
					"uniqueItems": false,
					"type": "array",
					"items": {
						"enum": [
							"All",
							"Device",
							"DeviceModel",
							"Rule",
							"Sensor",
							"SensorModel",
							"WeatherDataLocation",
							"WeatherDataModel",
							"Job",
							"JobType",
							"Scene",
							"SceneFile",
							"Farm",
							"RoleAssignment",
							"RoleDefinition",
							"Alert",
							"ExtendedType",
							"Telemetry",
							"Partner"
						],
						"type": "string"
					}
				}
			}
		},
		"RuleResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/RuleResponse"
					}
				}
			}
		},
		"RuleResponse": {
			"required": [
				"id",
				"farmId",
				"conditions",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the rule.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets rule creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets rule last updated date.",
					"type": "string"
				},
				"farmId": {
					"description": "Gets or sets id of the farm to which it is applied to.",
					"type": "string"
				},
				"conditions": {
					"description": "Gets or sets list of conditions in the Rule.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/Condition"
					}
				},
				"severityLevel": {
					"description": "Gets or sets severity level of the rule.",
					"default": "Info",
					"enum": [
						"Info",
						"Warning",
						"Critical"
					],
					"type": "string",
					"example": "Info"
				},
				"status": {
					"description": "Gets or sets status of the rule.",
					"default": "Enabled",
					"enum": [
						"Enabled",
						"Disabled"
					],
					"type": "string",
					"example": "Enabled"
				},
				"actions": {
					"description": "Gets or sets actions configuration of the rule.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/IAction"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"Condition": {
			"required": [
				"field",
				"operator",
				"value"
			],
			"type": "object",
			"properties": {
				"field": {
					"description": "Gets or sets Field name. The field name needs to be exactly as defined in the Sensor Model (Sensor Measure-&gt;Name).",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"operator": {
					"description": "Gets or sets operator for comparison.",
					"enum": [
						"EQ",
						"GT",
						"LT",
						"GE",
						"LE"
					],
					"type": "string"
				},
				"value": {
					"format": "double",
					"description": "Gets or sets sensor telemetry value.",
					"type": "number"
				}
			}
		},
		"RuleRequest": {
			"required": [
				"farmId",
				"conditions",
				"name"
			],
			"type": "object",
			"properties": {
				"farmId": {
					"description": "Gets or sets id of the farm to which it is applied to.",
					"type": "string"
				},
				"conditions": {
					"description": "Gets or sets list of conditions in the Rule.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/Condition"
					}
				},
				"severityLevel": {
					"description": "Gets or sets severity level of the rule.",
					"default": "Info",
					"enum": [
						"Info",
						"Warning",
						"Critical"
					],
					"type": "string",
					"example": "Info"
				},
				"status": {
					"description": "Gets or sets status of the rule.",
					"default": "Enabled",
					"enum": [
						"Enabled",
						"Disabled"
					],
					"type": "string",
					"example": "Enabled"
				},
				"actions": {
					"description": "Gets or sets actions configuration of the rule.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/IAction"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"SceneResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/SceneResponse"
					}
				}
			}
		},
		"SceneResponse": {
			"description": "Scene response.",
			"required": [
				"type",
				"source",
				"farmId",
				"date",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets system generated unique id.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets scene's creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets scene's last updated date.",
					"type": "string"
				},
				"type": {
					"description": "Gets or sets type of scene.\r\n<remark>Refer /ExtendedType APIs with key \"SceneType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"source": {
					"description": "Gets or sets source of scene.\r\n<remark>Refer /ExtendedType APIs with key \"SceneSource\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"farmId": {
					"description": "Gets or sets farm id.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"date": {
					"format": "date-time",
					"description": "Gets or sets the nominal date of the scene.",
					"type": "string"
				},
				"sequence": {
					"format": "int32",
					"description": "Gets or sets sequence of the scene within a particular date.\r\nWhen multiple scenes are available on the same date, each is assigned a different sequence number starting with 0.",
					"default": 0,
					"maximum": 2147483647.0,
					"minimum": 0.0,
					"type": "integer",
					"example": 0
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"SceneRequest": {
			"description": "Defines scene data for a space. This could be directly from satellite\r\n(a tile) or clipped/stitched/processed to an area of interest such\r\nas a farm.",
			"required": [
				"type",
				"source",
				"farmId",
				"date",
				"name"
			],
			"type": "object",
			"properties": {
				"type": {
					"description": "Gets or sets type of scene.\r\n<remark>Refer /ExtendedType APIs with key \"SceneType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"source": {
					"description": "Gets or sets source of scene.\r\n<remark>Refer /ExtendedType APIs with key \"SceneSource\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"farmId": {
					"description": "Gets or sets farm id.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"date": {
					"format": "date-time",
					"description": "Gets or sets the nominal date of the scene.",
					"type": "string"
				},
				"sequence": {
					"format": "int32",
					"description": "Gets or sets sequence of the scene within a particular date.\r\nWhen multiple scenes are available on the same date, each is assigned a different sequence number starting with 0.",
					"default": 0,
					"maximum": 2147483647.0,
					"minimum": 0.0,
					"type": "integer",
					"example": 0
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"GetSceneFileResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/GetSceneFileResponse"
					}
				}
			}
		},
		"GetSceneFileResponse": {
			"description": "Create scene file response.",
			"required": [
				"sceneId",
				"type",
				"contentType",
				"name"
			],
			"type": "object",
			"properties": {
				"downloadSASUrl": {
					"description": "Gets or sets Shared Access URL (SAS) to download actual content of file using Azure blob storage client.",
					"type": "string"
				},
				"id": {
					"description": "Gets or sets system generated unique id.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets scene file's creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets scene file's last updated date.",
					"type": "string"
				},
				"blobUrl": {
					"description": "Gets or sets blob path for actual content of file to download/upload if user has access to blob storage.\r\nUser should use Azure blob storage client to accomplish this.",
					"type": "string"
				},
				"sceneId": {
					"description": "Gets or sets scene id.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"type": {
					"description": "Gets or sets type of scene file.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"contentType": {
					"description": "Gets or sets content type of scene file.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileContentType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"SceneFileRequest": {
			"description": "Defines scene file.",
			"required": [
				"sceneId",
				"type",
				"contentType",
				"name"
			],
			"type": "object",
			"properties": {
				"sceneId": {
					"description": "Gets or sets scene id.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"type": {
					"description": "Gets or sets type of scene file.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"contentType": {
					"description": "Gets or sets content type of scene file.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileContentType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"CreateSceneFileResponse": {
			"description": "Create scene file response.",
			"required": [
				"sceneId",
				"type",
				"contentType",
				"name"
			],
			"type": "object",
			"properties": {
				"uploadSASUrl": {
					"description": "Gets or sets Shared Access URL (SAS) to upload actual content of file using Azure blob storage client.",
					"type": "string"
				},
				"id": {
					"description": "Gets or sets system generated unique id.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets scene file's creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets scene file's last updated date.",
					"type": "string"
				},
				"blobUrl": {
					"description": "Gets or sets blob path for actual content of file to download/upload if user has access to blob storage.\r\nUser should use Azure blob storage client to accomplish this.",
					"type": "string"
				},
				"sceneId": {
					"description": "Gets or sets scene id.",
					"maxLength": 200,
					"minLength": 3,
					"type": "string"
				},
				"type": {
					"description": "Gets or sets type of scene file.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"contentType": {
					"description": "Gets or sets content type of scene file.\r\n<remark>Refer /ExtendedType APIs with key \"SceneFileContentType\" for more information.</remark>",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"SensorResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/SensorResponse"
					}
				}
			}
		},
		"SensorResponse": {
			"required": [
				"id",
				"sensorModelId",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the sensor.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets sensor creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets sensor last updated date.",
					"type": "string"
				},
				"hardwareId": {
					"description": "Gets or sets id of the sensor given by manufacturer.",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"sensorModelId": {
					"description": "Gets or sets id of the associated sensor Model.",
					"type": "string"
				},
				"location": {
					"$ref": "#/definitions/Location",
					"description": "Gets or sets location of the sensor."
				},
				"depth": {
					"format": "double",
					"description": "Gets or sets depth in centimeters.",
					"type": "number"
				},
				"port": {
					"$ref": "#/definitions/DevicePort",
					"description": "Gets or sets port to which the sensor is connected."
				},
				"deviceId": {
					"description": "Gets or sets id of the associated device.",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"SensorRequest": {
			"required": [
				"sensorModelId",
				"name"
			],
			"type": "object",
			"properties": {
				"hardwareId": {
					"description": "Gets or sets id of the sensor given by manufacturer.",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"sensorModelId": {
					"description": "Gets or sets id of the associated sensor Model.",
					"type": "string"
				},
				"location": {
					"$ref": "#/definitions/Location",
					"description": "Gets or sets location of the sensor."
				},
				"depth": {
					"format": "double",
					"description": "Gets or sets depth in centimeters.",
					"type": "number"
				},
				"port": {
					"$ref": "#/definitions/DevicePort",
					"description": "Gets or sets port to which the sensor is connected."
				},
				"deviceId": {
					"description": "Gets or sets id of the associated device.",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"SensorModelResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/SensorModelResponse"
					}
				}
			}
		},
		"SensorModelResponse": {
			"description": "Sensor Model Response Object.",
			"required": [
				"id",
				"type",
				"productCode",
				"sensorMeasures",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the sensor type.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets sensor type creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets sensor type last updated date.",
					"type": "string"
				},
				"type": {
					"description": "Gets or sets type of the sensor.",
					"enum": [
						"Analog",
						"Digital"
					],
					"type": "string"
				},
				"manufacturer": {
					"description": "Gets or sets manufacturer of the sensor.",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"productCode": {
					"description": "Gets or sets sensor product code or Model Name/Number.\r\neg: RS-CO2-N01.",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"sensorMeasures": {
					"description": "Gets or sets list of Measurements supported by sensor.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/SensorMeasure"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"SensorMeasure": {
			"required": [
				"name",
				"dataType",
				"type",
				"unit"
			],
			"type": "object",
			"properties": {
				"name": {
					"description": "Gets or sets name of the Sensor Measure.\r\nFor measure from different depths, please specify the depth. Eg.soil_moisture_15cm\r\nThis name has to be consistent with the telemetry data.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"dataType": {
					"description": "Gets or sets sensor telemetry data type.",
					"enum": [
						"Double"
					],
					"type": "string"
				},
				"type": {
					"description": "Gets or sets measurement type of sensor telemetry data. (See ExtendedTypes with key \"SensorMeasureType\" to know all valid values).",
					"type": "string"
				},
				"unit": {
					"description": "Gets or sets unit of sensor telemetry data. (See ExtendedTypes with key \"SensorMeasureUnit\" to know all valid values).",
					"type": "string"
				},
				"aggregationType": {
					"description": "Gets or sets aggregation done on telemetry data.",
					"default": "None",
					"enum": [
						"None",
						"Average",
						"Maximum",
						"Minimum",
						"StandardDeviation",
						"Sum",
						"Total"
					],
					"type": "string",
					"example": "None"
				},
				"depth": {
					"format": "double",
					"description": "Gets or sets depth in centimeters.",
					"type": "number"
				},
				"description": {
					"description": "Gets or sets description of the Sensor Measure.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				}
			}
		},
		"SensorModelRequest": {
			"description": "Sensor Model Request Object.",
			"required": [
				"type",
				"productCode",
				"sensorMeasures",
				"name"
			],
			"type": "object",
			"properties": {
				"type": {
					"description": "Gets or sets type of the sensor.",
					"enum": [
						"Analog",
						"Digital"
					],
					"type": "string"
				},
				"manufacturer": {
					"description": "Gets or sets manufacturer of the sensor.",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"productCode": {
					"description": "Gets or sets sensor product code or Model Name/Number.\r\neg: RS-CO2-N01.",
					"maxLength": 200,
					"minLength": 1,
					"type": "string"
				},
				"sensorMeasures": {
					"description": "Gets or sets list of Measurements supported by sensor.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/SensorMeasure"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"TelemetryQueryFilter": {
			"required": [
				"searchSpan"
			],
			"type": "object",
			"properties": {
				"sensorId": {
					"type": "string"
				},
				"weatherDataLocationId": {
					"type": "string"
				},
				"searchSpan": {
					"$ref": "#/definitions/DateTimeRange"
				},
				"filter": {
					"$ref": "#/definitions/Tsx"
				},
				"take": {
					"format": "int32",
					"default": 250000,
					"type": "integer",
					"example": 250000
				},
				"projectedProperties": {
					"uniqueItems": false,
					"type": "array",
					"items": {
						"type": "object",
						"additionalProperties": {
							"type": "string"
						}
					}
				}
			}
		},
		"DateTimeRange": {
			"type": "object",
			"properties": {
				"from": {
					"format": "date-time",
					"type": "string"
				},
				"to": {
					"format": "date-time",
					"type": "string"
				}
			}
		},
		"Tsx": {
			"type": "object",
			"properties": {
				"tsx": {
					"type": "string"
				}
			}
		},
		"QueryResultPage": {
			"type": "object",
			"properties": {
				"timestamps": {
					"uniqueItems": false,
					"type": "array",
					"items": {
						"format": "date-time",
						"type": "string"
					}
				},
				"properties": {
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/PropertyValues"
					}
				},
				"continuationToken": {
					"type": "string"
				}
			}
		},
		"PropertyValues": {
			"type": "object",
			"properties": {
				"values": {
					"uniqueItems": false,
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"name": {
					"type": "string"
				},
				"type": {
					"type": "string"
				}
			}
		},
		"WeatherDataLocationResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/WeatherDataLocationResponse"
					}
				}
			}
		},
		"WeatherDataLocationResponse": {
			"description": "Weather data location Response model.",
			"required": [
				"id",
				"weatherDataModelId",
				"location",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the weatherDataLocation.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets weatherDataLocation creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets weatherDataLocation last updated date.",
					"type": "string"
				},
				"weatherDataModelId": {
					"description": "Gets or sets id of the associated weather data model.",
					"type": "string"
				},
				"location": {
					"$ref": "#/definitions/Location",
					"description": "Gets or sets location of the weather data location. This can't be changed later."
				},
				"farmId": {
					"description": "Gets or sets id of the associated farm.",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"WeatherDataLocationRequest": {
			"description": "Weather data location Request model.",
			"required": [
				"weatherDataModelId",
				"location",
				"name"
			],
			"type": "object",
			"properties": {
				"weatherDataModelId": {
					"description": "Gets or sets id of the associated weather data model.",
					"type": "string"
				},
				"location": {
					"$ref": "#/definitions/Location",
					"description": "Gets or sets location of the weather data location. This can't be changed later."
				},
				"farmId": {
					"description": "Gets or sets id of the associated farm.",
					"type": "string"
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"WeatherDataModelResponseListResponse": {
			"description": "Paginated list response.",
			"type": "object",
			"properties": {
				"items": {
					"description": "Gets or sets list of objects.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/WeatherDataModelResponse"
					}
				}
			}
		},
		"WeatherDataModelResponse": {
			"description": "Weather data model Response model.",
			"required": [
				"id",
				"weatherMeasures",
				"name"
			],
			"type": "object",
			"properties": {
				"id": {
					"description": "Gets or sets unique id auto generated for the weather data model type.",
					"type": "string"
				},
				"createdAt": {
					"format": "date-time",
					"description": "Gets or sets weather data model type creation date.",
					"type": "string"
				},
				"lastModifiedAt": {
					"format": "date-time",
					"description": "Gets or sets weather data model type last updated date.",
					"type": "string"
				},
				"weatherMeasures": {
					"description": "Gets or sets list of Measurements supported by weather data location.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/WeatherMeasure"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"WeatherMeasure": {
			"description": "Definition for weather measure.",
			"required": [
				"name",
				"dataType",
				"type",
				"unit"
			],
			"type": "object",
			"properties": {
				"name": {
					"description": "Gets or sets name of the Weather Measure.\r\nFor measure from different depths, please specify the depth. Eg.soil_moisture_15cm\r\nThis name has to be consistent with the telemetry data.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"dataType": {
					"description": "Gets or sets weather telemetry data type.",
					"enum": [
						"Double",
						"Enum"
					],
					"type": "string"
				},
				"measureEnumDefinition": {
					"description": "Gets or sets weather measure enum definition.",
					"type": "object",
					"additionalProperties": {
						"format": "int32",
						"type": "integer"
					}
				},
				"type": {
					"description": "Gets or sets measurement type of weather telemetry data. (See ExtendedTypes with key \"WeatherMeasureType\" to know all valid values).",
					"type": "string"
				},
				"unit": {
					"description": "Gets or sets unit of weather telemetry data. (See ExtendedTypes with key \"WeatherMeasureUnit\" to know all valid values).",
					"type": "string"
				},
				"aggregationType": {
					"description": "Gets or sets aggregation done on weather telemetry data.",
					"default": "None",
					"enum": [
						"None",
						"Average",
						"Maximum",
						"Minimum",
						"StandardDeviation",
						"Sum",
						"Total"
					],
					"type": "string",
					"example": "None"
				},
				"depth": {
					"format": "double",
					"description": "Gets or sets depth in centimeters.",
					"type": "number"
				},
				"description": {
					"description": "Gets or sets description of the Weather Measure.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				}
			}
		},
		"WeatherDataModelRequest": {
			"description": "Weather data model Request model.",
			"required": [
				"weatherMeasures",
				"name"
			],
			"type": "object",
			"properties": {
				"weatherMeasures": {
					"description": "Gets or sets list of Measurements supported by weather data location.",
					"uniqueItems": false,
					"type": "array",
					"items": {
						"$ref": "#/definitions/WeatherMeasure"
					}
				},
				"name": {
					"description": "Gets or sets name to identify resource.",
					"maxLength": 100,
					"minLength": 3,
					"type": "string"
				},
				"description": {
					"description": "Gets or sets textual description of resource.",
					"maxLength": 1000,
					"minLength": 3,
					"type": "string"
				},
				"properties": {
					"description": "Gets or sets additional properties of the resource.",
					"type": "object",
					"additionalProperties": {
						"type": "object"
					}
				}
			}
		},
		"MultiPolygon": {
			"required": [
				"type",
				"coordinates"
			],
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/IGeoJSONObject"
				},
				{
					"required": [
						"type",
						"coordinates"
					],
					"type": "object",
					"properties": {
						"type": {
							"enum": [
								"Polygon",
								"MultiPolygon"
							],
							"type": "string"
						},
						"coordinates": {
							"minLength": 1,
							"uniqueItems": false,
							"type": "array",
							"items": {
								"uniqueItems": false,
								"type": "array",
								"items": {
									"uniqueItems": false,
									"type": "array",
									"items": {
										"uniqueItems": false,
										"type": "array",
										"items": {
											"format": "double",
											"type": "number"
										}
									}
								}
							}
						}
					}
				}
			]
		},
		"Polygon": {
			"required": [
				"type",
				"coordinates"
			],
			"type": "object",
			"allOf": [
				{
					"$ref": "#/definitions/IGeoJSONObject"
				},
				{
					"required": [
						"type",
						"coordinates"
					],
					"type": "object",
					"properties": {
						"type": {
							"enum": [
								"Polygon",
								"MultiPolygon"
							],
							"type": "string"
						},
						"coordinates": {
							"minLength": 1,
							"uniqueItems": false,
							"type": "array",
							"items": {
								"uniqueItems": false,
								"type": "array",
								"items": {
									"uniqueItems": false,
									"type": "array",
									"items": {
										"format": "double",
										"type": "number"
									}
								}
							}
						}
					}
				}
			]
		}
	},
	"securityDefinitions": {
		"Bearer": {
			"name": "Authorization",
			"in": "header",
			"type": "apiKey",
			"description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\""
		}
	},
	"security": [
		{
			"Bearer": []
		}
	]
}