//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace FarmBeats.Api.Models
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FarmBeatsswaggerClient 
    {
        private string _baseUrl = "https://";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public FarmBeatsswaggerClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }
    
        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Returns list of alerts.</summary>
        /// <param name="ruleIds">Gets or sets list of rule ids for which alerts are generated.</param>
        /// <param name="deviceIds">Gets or sets list of device ids for which alerts are generated.</param>
        /// <param name="severityLevels">Gets or sets list of rule severity levels.</param>
        /// <param name="status">Gets or sets alert status.</param>
        /// <param name="includes">Gets or sets list of properties to be included in AlertResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertResponseListResponse> AlertGetAllAsync(System.Collections.Generic.IEnumerable<string> ruleIds, System.Collections.Generic.IEnumerable<string> deviceIds, System.Collections.Generic.IEnumerable<Anonymous> severityLevels, Status? status, System.Collections.Generic.IEnumerable<Anonymous2> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return AlertGetAllAsync(ruleIds, deviceIds, severityLevels, status, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of alerts.</summary>
        /// <param name="ruleIds">Gets or sets list of rule ids for which alerts are generated.</param>
        /// <param name="deviceIds">Gets or sets list of device ids for which alerts are generated.</param>
        /// <param name="severityLevels">Gets or sets list of rule severity levels.</param>
        /// <param name="status">Gets or sets alert status.</param>
        /// <param name="includes">Gets or sets list of properties to be included in AlertResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertResponseListResponse> AlertGetAllAsync(System.Collections.Generic.IEnumerable<string> ruleIds, System.Collections.Generic.IEnumerable<string> deviceIds, System.Collections.Generic.IEnumerable<Anonymous> severityLevels, Status? status, System.Collections.Generic.IEnumerable<Anonymous2> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alert?");
            if (ruleIds != null) 
            {
                foreach (var item_ in ruleIds) { urlBuilder_.Append(System.Uri.EscapeDataString("ruleIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (deviceIds != null) 
            {
                foreach (var item_ in deviceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("deviceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (severityLevels != null) 
            {
                foreach (var item_ in severityLevels) { urlBuilder_.Append(System.Uri.EscapeDataString("severityLevels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (status != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlertResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns alert for the given id.</summary>
        /// <param name="id">Id of the alert object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AlertResponse> AlertGetAsync(string id)
        {
            return AlertGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns alert for the given id.</summary>
        /// <param name="id">Id of the alert object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<AlertResponse> AlertGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alert/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AlertResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(AlertResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the alert with given id.</summary>
        /// <param name="id">Id of the alert.</param>
        /// <param name="input">Alert request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task AlertUpdateAsync(string id, AlertRequest input)
        {
            return AlertUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the alert with given id.</summary>
        /// <param name="id">Id of the alert.</param>
        /// <param name="input">Alert request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task AlertUpdateAsync(string id, AlertRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Alert/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of devices.</summary>
        /// <param name="names">Gets or sets list of names of devices.</param>
        /// <param name="deviceModelIds">Gets or sets list of device model ids.</param>
        /// <param name="farmIds">Gets or sets list of farm ids.</param>
        /// <param name="parentDeviceIds">Gets or sets list of parent device ids.</param>
        /// <param name="hardwareIds">Gets or sets list of hardware ids.</param>
        /// <param name="includes">Gets or sets list of properties to be included in DeviceResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceResponseListResponse> DeviceGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> deviceModelIds, System.Collections.Generic.IEnumerable<string> farmIds, System.Collections.Generic.IEnumerable<string> parentDeviceIds, System.Collections.Generic.IEnumerable<string> hardwareIds, System.Collections.Generic.IEnumerable<Anonymous3> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return DeviceGetAllAsync(names, deviceModelIds, farmIds, parentDeviceIds, hardwareIds, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of devices.</summary>
        /// <param name="names">Gets or sets list of names of devices.</param>
        /// <param name="deviceModelIds">Gets or sets list of device model ids.</param>
        /// <param name="farmIds">Gets or sets list of farm ids.</param>
        /// <param name="parentDeviceIds">Gets or sets list of parent device ids.</param>
        /// <param name="hardwareIds">Gets or sets list of hardware ids.</param>
        /// <param name="includes">Gets or sets list of properties to be included in DeviceResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceResponseListResponse> DeviceGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> deviceModelIds, System.Collections.Generic.IEnumerable<string> farmIds, System.Collections.Generic.IEnumerable<string> parentDeviceIds, System.Collections.Generic.IEnumerable<string> hardwareIds, System.Collections.Generic.IEnumerable<Anonymous3> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Device?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (deviceModelIds != null) 
            {
                foreach (var item_ in deviceModelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("deviceModelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (farmIds != null) 
            {
                foreach (var item_ in farmIds) { urlBuilder_.Append(System.Uri.EscapeDataString("farmIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (parentDeviceIds != null) 
            {
                foreach (var item_ in parentDeviceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("parentDeviceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hardwareIds != null) 
            {
                foreach (var item_ in hardwareIds) { urlBuilder_.Append(System.Uri.EscapeDataString("hardwareIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeviceResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeviceResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new device with given request body.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceResponse> DeviceCreateAsync(DeviceRequest input)
        {
            return DeviceCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new device with given request body.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceResponse> DeviceCreateAsync(DeviceRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Device");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeviceResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeviceResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns device for the given Id.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceResponse> DeviceGetAsync(string id)
        {
            return DeviceGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns device for the given Id.</summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceResponse> DeviceGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Device/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeviceResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeviceResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the device with given id.</summary>
        /// <param name="id">Id of the device.</param>
        /// <param name="input">New device object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeviceUpdateAsync(string id, DeviceRequest input)
        {
            return DeviceUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the device with given id.</summary>
        /// <param name="id">Id of the device.</param>
        /// <param name="input">New device object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeviceUpdateAsync(string id, DeviceRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Device/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the device with given id and parameters.</summary>
        /// <param name="id">device id.</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeviceDeleteAsync(string id, bool? force)
        {
            return DeviceDeleteAsync(id, force, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the device with given id and parameters.</summary>
        /// <param name="id">device id.</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeviceDeleteAsync(string id, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Device/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (force != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("force") + "=").Append(System.Uri.EscapeDataString(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of device models.</summary>
        /// <param name="names">Gets or sets list of names of device models.</param>
        /// <param name="type">Gets or sets device type.</param>
        /// <param name="manufactures">Gets or sets list of manufacturers.</param>
        /// <param name="productCodes">Gets or sets list of product codes.</param>
        /// <param name="includes">Gets or sets list of properties to be included in DeviceModelResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModelResponseListResponse> DeviceModelGetAllAsync(System.Collections.Generic.IEnumerable<string> names, Type? type, System.Collections.Generic.IEnumerable<string> manufactures, System.Collections.Generic.IEnumerable<string> productCodes, System.Collections.Generic.IEnumerable<Anonymous4> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return DeviceModelGetAllAsync(names, type, manufactures, productCodes, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of device models.</summary>
        /// <param name="names">Gets or sets list of names of device models.</param>
        /// <param name="type">Gets or sets device type.</param>
        /// <param name="manufactures">Gets or sets list of manufacturers.</param>
        /// <param name="productCodes">Gets or sets list of product codes.</param>
        /// <param name="includes">Gets or sets list of properties to be included in DeviceModelResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModelResponseListResponse> DeviceModelGetAllAsync(System.Collections.Generic.IEnumerable<string> names, Type? type, System.Collections.Generic.IEnumerable<string> manufactures, System.Collections.Generic.IEnumerable<string> productCodes, System.Collections.Generic.IEnumerable<Anonymous4> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/DeviceModel?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (type != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("type") + "=").Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (manufactures != null) 
            {
                foreach (var item_ in manufactures) { urlBuilder_.Append(System.Uri.EscapeDataString("manufactures") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (productCodes != null) 
            {
                foreach (var item_ in productCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("productCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeviceModelResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeviceModelResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new device model with given request body.</summary>
        /// <param name="input">Device Model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModelResponse> DeviceModelCreateAsync(DeviceModelRequest input)
        {
            return DeviceModelCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new device model with given request body.</summary>
        /// <param name="input">Device Model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModelResponse> DeviceModelCreateAsync(DeviceModelRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/DeviceModel");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeviceModelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeviceModelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns device model for the given Id.</summary>
        /// <param name="id">id of the Device Model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DeviceModelResponse> DeviceModelGetAsync(string id)
        {
            return DeviceModelGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns device model for the given Id.</summary>
        /// <param name="id">id of the Device Model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DeviceModelResponse> DeviceModelGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/DeviceModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DeviceModelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(DeviceModelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the device model with given id.</summary>
        /// <param name="id">id of the device model to be deleted.</param>
        /// <param name="input">Device Model Object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeviceModelUpdateAsync(string id, DeviceModelRequest input)
        {
            return DeviceModelUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the device model with given id.</summary>
        /// <param name="id">id of the device model to be deleted.</param>
        /// <param name="input">Device Model Object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeviceModelUpdateAsync(string id, DeviceModelRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/DeviceModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the device model with given id.</summary>
        /// <param name="id">id of the Device Model to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task DeviceModelDeleteAsync(string id)
        {
            return DeviceModelDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the device model with given id.</summary>
        /// <param name="id">id of the Device Model to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task DeviceModelDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/DeviceModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a list of extended types.</summary>
        /// <param name="keys">Gets or sets list of keys of extended type.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExtendedTypeResponseListResponse> ExtendedTypeGetAllAsync(System.Collections.Generic.IEnumerable<Anonymous5> keys, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return ExtendedTypeGetAllAsync(keys, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a list of extended types.</summary>
        /// <param name="keys">Gets or sets list of keys of extended type.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExtendedTypeResponseListResponse> ExtendedTypeGetAllAsync(System.Collections.Generic.IEnumerable<Anonymous5> keys, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ExtendedType?");
            if (keys != null) 
            {
                foreach (var item_ in keys) { urlBuilder_.Append(System.Uri.EscapeDataString("keys") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExtendedTypeResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ExtendedTypeResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns extended type for the given id.</summary>
        /// <param name="id">id of the extended type.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ExtendedTypeResponse> ExtendedTypeGetAsync(string id)
        {
            return ExtendedTypeGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns extended type for the given id.</summary>
        /// <param name="id">id of the extended type.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<ExtendedTypeResponse> ExtendedTypeGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ExtendedType/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ExtendedTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(ExtendedTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates existing extended type with given id. User should pass existing values plus required new values otherwise it will throw a BadRequest with HTTP status code 400.</summary>
        /// <param name="id">id of the extended type.</param>
        /// <param name="input">extended type request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task ExtendedTypeUpdateAsync(string id, ExtendedTypeRequest input)
        {
            return ExtendedTypeUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates existing extended type with given id. User should pass existing values plus required new values otherwise it will throw a BadRequest with HTTP status code 400.</summary>
        /// <param name="id">id of the extended type.</param>
        /// <param name="input">extended type request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task ExtendedTypeUpdateAsync(string id, ExtendedTypeRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ExtendedType/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of farms.</summary>
        /// <param name="names">Gets or sets list of names of farms.</param>
        /// <param name="includes">Gets or sets list of properties to be included in FarmResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FarmResponseListResponse> FarmGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous6> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return FarmGetAllAsync(names, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of farms.</summary>
        /// <param name="names">Gets or sets list of names of farms.</param>
        /// <param name="includes">Gets or sets list of properties to be included in FarmResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FarmResponseListResponse> FarmGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous6> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Farm?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FarmResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FarmResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new farm with given request body.</summary>
        /// <param name="input">Farm request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FarmResponse> FarmCreateAsync(FarmRequest input)
        {
            return FarmCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new farm with given request body.</summary>
        /// <param name="input">Farm request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FarmResponse> FarmCreateAsync(FarmRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Farm");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FarmResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FarmResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns farm for the given id.</summary>
        /// <param name="id">Id of the farm object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FarmResponse> FarmGetAsync(string id)
        {
            return FarmGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns farm for the given id.</summary>
        /// <param name="id">Id of the farm object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FarmResponse> FarmGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Farm/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FarmResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(FarmResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the farm with given id.</summary>
        /// <param name="id">Id of the farm.</param>
        /// <param name="input">Farm request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task FarmUpdateAsync(string id, FarmRequest input)
        {
            return FarmUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the farm with given id.</summary>
        /// <param name="id">Id of the farm.</param>
        /// <param name="input">Farm request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task FarmUpdateAsync(string id, FarmRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Farm/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the farm with given id.</summary>
        /// <param name="id">Id of the farm object.</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task FarmDeleteAsync(string id, bool? force)
        {
            return FarmDeleteAsync(id, force, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the farm with given id.</summary>
        /// <param name="id">Id of the farm object.</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task FarmDeleteAsync(string id, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Farm/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (force != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("force") + "=").Append(System.Uri.EscapeDataString(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a list of jobs.</summary>
        /// <param name="typeIds">Gets or sets list of job type ids of jobs.</param>
        /// <param name="states">Gets or sets list of job states of jobs.</param>
        /// <param name="names">Gets or sets list of names of jobs which is specified while creating a job.</param>
        /// <param name="parentJobIds">Gets or sets list of parent job ids.</param>
        /// <param name="includes">Gets or sets list of properties to be included in JobResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponseListResponse> JobGetAllAsync(System.Collections.Generic.IEnumerable<string> typeIds, System.Collections.Generic.IEnumerable<Anonymous7> states, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> parentJobIds, System.Collections.Generic.IEnumerable<Anonymous8> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return JobGetAllAsync(typeIds, states, names, parentJobIds, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a list of jobs.</summary>
        /// <param name="typeIds">Gets or sets list of job type ids of jobs.</param>
        /// <param name="states">Gets or sets list of job states of jobs.</param>
        /// <param name="names">Gets or sets list of names of jobs which is specified while creating a job.</param>
        /// <param name="parentJobIds">Gets or sets list of parent job ids.</param>
        /// <param name="includes">Gets or sets list of properties to be included in JobResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponseListResponse> JobGetAllAsync(System.Collections.Generic.IEnumerable<string> typeIds, System.Collections.Generic.IEnumerable<Anonymous7> states, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> parentJobIds, System.Collections.Generic.IEnumerable<Anonymous8> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Job?");
            if (typeIds != null) 
            {
                foreach (var item_ in typeIds) { urlBuilder_.Append(System.Uri.EscapeDataString("typeIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (states != null) 
            {
                foreach (var item_ in states) { urlBuilder_.Append(System.Uri.EscapeDataString("states") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (parentJobIds != null) 
            {
                foreach (var item_ in parentJobIds) { urlBuilder_.Append(System.Uri.EscapeDataString("parentJobIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JobResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new job with given request body.</summary>
        /// <param name="input">User's job request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> JobCreateAsync(JobRequest input)
        {
            return JobCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new job with given request body.</summary>
        /// <param name="input">User's job request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> JobCreateAsync(JobRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Job");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JobResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns job for the given id.</summary>
        /// <param name="id">Job id (system-generated).</param>
        /// <param name="debug">Flag indicating if debug info is required or not (Default: false).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> JobGetAsync(string id, bool? debug)
        {
            return JobGetAsync(id, debug, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns job for the given id.</summary>
        /// <param name="id">Job id (system-generated).</param>
        /// <param name="debug">Flag indicating if debug info is required or not (Default: false).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> JobGetAsync(string id, bool? debug, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Job/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (debug != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("debug") + "=").Append(System.Uri.EscapeDataString(ConvertToString(debug, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JobResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes job with given id.</summary>
        /// <param name="id">Id of job to deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task JobDeleteAsync(string id)
        {
            return JobDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes job with given id.</summary>
        /// <param name="id">Id of job to deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task JobDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Job/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Request to stop a job with given id.</summary>
        /// <param name="id">Id of job that need to be stopped.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobResponse> JobStopJobAsync(string id)
        {
            return JobStopJobAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Request to stop a job with given id.</summary>
        /// <param name="id">Id of job that need to be stopped.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobResponse> JobStopJobAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Job/{id}/stop");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JobResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of job types.</summary>
        /// <param name="names">Gets or sets list of names of job types which is specified while creating a job type.</param>
        /// <param name="status">Gets or sets status of Job Type.</param>
        /// <param name="includes">Gets or sets list of properties to be included in JobTypeResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobTypeResponseListResponse> JobTypeGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous9> status, System.Collections.Generic.IEnumerable<Anonymous10> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return JobTypeGetAllAsync(names, status, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of job types.</summary>
        /// <param name="names">Gets or sets list of names of job types which is specified while creating a job type.</param>
        /// <param name="status">Gets or sets status of Job Type.</param>
        /// <param name="includes">Gets or sets list of properties to be included in JobTypeResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobTypeResponseListResponse> JobTypeGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous9> status, System.Collections.Generic.IEnumerable<Anonymous10> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobType?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (status != null) 
            {
                foreach (var item_ in status) { urlBuilder_.Append(System.Uri.EscapeDataString("status") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobTypeResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JobTypeResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new job type with given request body.</summary>
        /// <param name="input">User's job type request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobTypeResponse> JobTypeCreateAsync(JobTypeRequest input)
        {
            return JobTypeCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new job type with given request body.</summary>
        /// <param name="input">User's job type request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobTypeResponse> JobTypeCreateAsync(JobTypeRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobType");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JobTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns job type for the given id.</summary>
        /// <param name="id">job type id (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<JobTypeResponse> JobTypeGetAsync(string id)
        {
            return JobTypeGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns job type for the given id.</summary>
        /// <param name="id">job type id (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<JobTypeResponse> JobTypeGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobType/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JobTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(JobTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates job type with given id.</summary>
        /// <param name="id">Id of job type that need to be updated (system-generated).</param>
        /// <param name="input">New state of job type.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task JobTypeUpdateAsync(string id, JobTypeRequest input)
        {
            return JobTypeUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates job type with given id.</summary>
        /// <param name="id">Id of job type that need to be updated (system-generated).</param>
        /// <param name="input">New state of job type.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task JobTypeUpdateAsync(string id, JobTypeRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobType/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes job type with given id and parameters.</summary>
        /// <param name="id">Id of job type to deleted (system-generated).</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task JobTypeDeleteAsync(string id, bool? force)
        {
            return JobTypeDeleteAsync(id, force, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes job type with given id and parameters.</summary>
        /// <param name="id">Id of job type to deleted (system-generated).</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task JobTypeDeleteAsync(string id, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/JobType/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (force != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("force") + "=").Append(System.Uri.EscapeDataString(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of partners.</summary>
        /// <param name="names">Gets or sets list of names of partner.</param>
        /// <param name="objectIds">Gets or sets list of Object id's.</param>
        /// <param name="partnerTypes">Gets or sets list of Partner Types.</param>
        /// <param name="tenantIds">Gets or sets list of Tenant id's.</param>
        /// <param name="includes">Gets or sets list of properties to be included in PartnerResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartnerLimitedResponseListResponse> PartnerGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> objectIds, System.Collections.Generic.IEnumerable<Anonymous11> partnerTypes, System.Collections.Generic.IEnumerable<string> tenantIds, System.Collections.Generic.IEnumerable<Anonymous12> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return PartnerGetAllAsync(names, objectIds, partnerTypes, tenantIds, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of partners.</summary>
        /// <param name="names">Gets or sets list of names of partner.</param>
        /// <param name="objectIds">Gets or sets list of Object id's.</param>
        /// <param name="partnerTypes">Gets or sets list of Partner Types.</param>
        /// <param name="tenantIds">Gets or sets list of Tenant id's.</param>
        /// <param name="includes">Gets or sets list of properties to be included in PartnerResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PartnerLimitedResponseListResponse> PartnerGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> objectIds, System.Collections.Generic.IEnumerable<Anonymous11> partnerTypes, System.Collections.Generic.IEnumerable<string> tenantIds, System.Collections.Generic.IEnumerable<Anonymous12> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Partner?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (objectIds != null) 
            {
                foreach (var item_ in objectIds) { urlBuilder_.Append(System.Uri.EscapeDataString("objectIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerTypes != null) 
            {
                foreach (var item_ in partnerTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("partnerTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tenantIds != null) 
            {
                foreach (var item_ in tenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("tenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerLimitedResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PartnerLimitedResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new partner with given request body.</summary>
        /// <param name="input">Partner request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartnerResponse> PartnerCreateAsync(PartnerRequest input)
        {
            return PartnerCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new partner with given request body.</summary>
        /// <param name="input">Partner request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PartnerResponse> PartnerCreateAsync(PartnerRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Partner");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "202") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PartnerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns partner for the given id.</summary>
        /// <param name="id">Id of the partner object.</param>
        /// <param name="debug">Flag indicating if debug info is required or not (Default: false).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartnerResponse> PartnerGetAsync(string id, bool? debug)
        {
            return PartnerGetAsync(id, debug, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns partner for the given id.</summary>
        /// <param name="id">Id of the partner object.</param>
        /// <param name="debug">Flag indicating if debug info is required or not (Default: false).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PartnerResponse> PartnerGetAsync(string id, bool? debug, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Partner/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (debug != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("debug") + "=").Append(System.Uri.EscapeDataString(ConvertToString(debug, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PartnerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the partner with given id.</summary>
        /// <param name="id">Id of the partner.</param>
        /// <param name="input">Partner request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PartnerUpdateAsync(string id, PartnerRequest input)
        {
            return PartnerUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the partner with given id.</summary>
        /// <param name="id">Id of the partner.</param>
        /// <param name="input">Partner request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PartnerUpdateAsync(string id, PartnerRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Partner/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the partner with given id.</summary>
        /// <param name="id">Id of the partner object.</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task PartnerDeleteAsync(string id, bool? force)
        {
            return PartnerDeleteAsync(id, force, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the partner with given id.</summary>
        /// <param name="id">Id of the partner object.</param>
        /// <param name="force">Gets or sets a value indicating whether force delete is allowed.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task PartnerDeleteAsync(string id, bool? force, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Partner/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (force != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("force") + "=").Append(System.Uri.EscapeDataString(ConvertToString(force, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ == "202") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Renew connection strings of event hub.</summary>
        /// <param name="id">Id of partner (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PartnerResponse> PartnerRenewAsync(string id)
        {
            return PartnerRenewAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Renew connection strings of event hub.</summary>
        /// <param name="id">Id of partner (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PartnerResponse> PartnerRenewAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Partner/{id}/renew");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PartnerResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of role assignments.</summary>
        /// <param name="roleDefinitionIds">Gets or sets list of role ids.</param>
        /// <param name="objectIds">Gets or sets list of object ids.</param>
        /// <param name="objectIdTypes">Gets or sets list of object id types.</param>
        /// <param name="tenantIds">Gets or sets list of tenant ids.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RoleAssignmentResponseListResponse> RoleAssignmentGetAllAsync(System.Collections.Generic.IEnumerable<string> roleDefinitionIds, System.Collections.Generic.IEnumerable<string> objectIds, System.Collections.Generic.IEnumerable<Anonymous13> objectIdTypes, System.Collections.Generic.IEnumerable<string> tenantIds, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return RoleAssignmentGetAllAsync(roleDefinitionIds, objectIds, objectIdTypes, tenantIds, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of role assignments.</summary>
        /// <param name="roleDefinitionIds">Gets or sets list of role ids.</param>
        /// <param name="objectIds">Gets or sets list of object ids.</param>
        /// <param name="objectIdTypes">Gets or sets list of object id types.</param>
        /// <param name="tenantIds">Gets or sets list of tenant ids.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RoleAssignmentResponseListResponse> RoleAssignmentGetAllAsync(System.Collections.Generic.IEnumerable<string> roleDefinitionIds, System.Collections.Generic.IEnumerable<string> objectIds, System.Collections.Generic.IEnumerable<Anonymous13> objectIdTypes, System.Collections.Generic.IEnumerable<string> tenantIds, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/RoleAssignment?");
            if (roleDefinitionIds != null) 
            {
                foreach (var item_ in roleDefinitionIds) { urlBuilder_.Append(System.Uri.EscapeDataString("roleDefinitionIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (objectIds != null) 
            {
                foreach (var item_ in objectIds) { urlBuilder_.Append(System.Uri.EscapeDataString("objectIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (objectIdTypes != null) 
            {
                foreach (var item_ in objectIdTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("objectIdTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (tenantIds != null) 
            {
                foreach (var item_ in tenantIds) { urlBuilder_.Append(System.Uri.EscapeDataString("tenantIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RoleAssignmentResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new role assignment with given request body.</summary>
        /// <param name="input">Role assignment request model.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RoleAssignmentResponse> RoleAssignmentCreateAsync(RoleAssignmentRequest input)
        {
            return RoleAssignmentCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new role assignment with given request body.</summary>
        /// <param name="input">Role assignment request model.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RoleAssignmentResponse> RoleAssignmentCreateAsync(RoleAssignmentRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/RoleAssignment");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RoleAssignmentResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns role assignment for the given id.</summary>
        /// <param name="id">Role assignment id given while creating a role assignment (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RoleAssignmentResponse> RoleAssignmentGetAsync(string id)
        {
            return RoleAssignmentGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns role assignment for the given id.</summary>
        /// <param name="id">Role assignment id given while creating a role assignment (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RoleAssignmentResponse> RoleAssignmentGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/RoleAssignment/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleAssignmentResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RoleAssignmentResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the role assignment with given id.</summary>
        /// <param name="id">Id of role assignment that need to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RoleAssignmentDeleteAsync(string id)
        {
            return RoleAssignmentDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the role assignment with given id.</summary>
        /// <param name="id">Id of role assignment that need to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RoleAssignmentDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/RoleAssignment/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of role definitions.</summary>
        /// <param name="names">Gets or sets list of names of role definitions.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RoleDefinitionResponseListResponse> RoleDefinitionGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return RoleDefinitionGetAllAsync(names, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of role definitions.</summary>
        /// <param name="names">Gets or sets list of names of role definitions.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RoleDefinitionResponseListResponse> RoleDefinitionGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/RoleDefinition?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleDefinitionResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RoleDefinitionResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns role definition for the given id.</summary>
        /// <param name="id">Role definition id given while creating a role assignment (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RoleDefinitionResponse> RoleDefinitionGetAsync(string id)
        {
            return RoleDefinitionGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns role definition for the given id.</summary>
        /// <param name="id">Role definition id given while creating a role assignment (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RoleDefinitionResponse> RoleDefinitionGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/RoleDefinition/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RoleDefinitionResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RoleDefinitionResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of rules.</summary>
        /// <param name="names">Gets or sets list of names of rules.</param>
        /// <param name="farmIds">Gets or sets list of farm id's.</param>
        /// <param name="severityLevels">Gets or sets list of severity levels.</param>
        /// <param name="ruleStatus">Gets or sets rule enabled.</param>
        /// <param name="includes">Gets or sets list of properties to be included in RuleResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RuleResponseListResponse> RuleGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> farmIds, System.Collections.Generic.IEnumerable<Anonymous14> severityLevels, RuleStatus? ruleStatus, System.Collections.Generic.IEnumerable<Anonymous15> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return RuleGetAllAsync(names, farmIds, severityLevels, ruleStatus, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of rules.</summary>
        /// <param name="names">Gets or sets list of names of rules.</param>
        /// <param name="farmIds">Gets or sets list of farm id's.</param>
        /// <param name="severityLevels">Gets or sets list of severity levels.</param>
        /// <param name="ruleStatus">Gets or sets rule enabled.</param>
        /// <param name="includes">Gets or sets list of properties to be included in RuleResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RuleResponseListResponse> RuleGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> farmIds, System.Collections.Generic.IEnumerable<Anonymous14> severityLevels, RuleStatus? ruleStatus, System.Collections.Generic.IEnumerable<Anonymous15> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Rule?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (farmIds != null) 
            {
                foreach (var item_ in farmIds) { urlBuilder_.Append(System.Uri.EscapeDataString("farmIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (severityLevels != null) 
            {
                foreach (var item_ in severityLevels) { urlBuilder_.Append(System.Uri.EscapeDataString("severityLevels") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ruleStatus != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("ruleStatus") + "=").Append(System.Uri.EscapeDataString(ConvertToString(ruleStatus, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuleResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RuleResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new rule with given request body.</summary>
        /// <param name="input">Rule request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RuleResponse> RuleCreateAsync(RuleRequest input)
        {
            return RuleCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new rule with given request body.</summary>
        /// <param name="input">Rule request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RuleResponse> RuleCreateAsync(RuleRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Rule");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RuleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns rule for the given id.</summary>
        /// <param name="id">Id of the rule object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<RuleResponse> RuleGetAsync(string id)
        {
            return RuleGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns rule for the given id.</summary>
        /// <param name="id">Id of the rule object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<RuleResponse> RuleGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Rule/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RuleResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(RuleResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the rule with given id.</summary>
        /// <param name="id">Id of the rule.</param>
        /// <param name="input">Rule request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RuleUpdateAsync(string id, RuleRequest input)
        {
            return RuleUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the rule with given id.</summary>
        /// <param name="id">Id of the rule.</param>
        /// <param name="input">Rule request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RuleUpdateAsync(string id, RuleRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Rule/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the rule with given id.</summary>
        /// <param name="id">Id of the rule object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task RuleDeleteAsync(string id)
        {
            return RuleDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the rule with given id.</summary>
        /// <param name="id">Id of the rule object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task RuleDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Rule/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns a list of scenes.</summary>
        /// <param name="types">Gets or sets list of types of scenes.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneType" for more information.&lt;/remark&gt;</param>
        /// <param name="sources">Gets or sets list of sources of scenes.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneSource" for more information.&lt;/remark&gt;</param>
        /// <param name="farmId">Gets or sets farm id of scenes.</param>
        /// <param name="sequence">Gets or sets sequence number of scenes.</param>
        /// <param name="minSceneDate">Gets or sets minimum scene nominal date (inclusive).</param>
        /// <param name="maxSceneDate">Gets or sets maximum scene nominal date (inclusive).</param>
        /// <param name="names">Gets or sets list of names of scenes which is specified while creating a scene.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SceneResponse.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SceneResponseListResponse> SceneGetAllAsync(System.Collections.Generic.IEnumerable<string> types, System.Collections.Generic.IEnumerable<string> sources, string farmId, int? sequence, System.DateTimeOffset? minSceneDate, System.DateTimeOffset? maxSceneDate, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous16> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return SceneGetAllAsync(types, sources, farmId, sequence, minSceneDate, maxSceneDate, names, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns a list of scenes.</summary>
        /// <param name="types">Gets or sets list of types of scenes.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneType" for more information.&lt;/remark&gt;</param>
        /// <param name="sources">Gets or sets list of sources of scenes.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneSource" for more information.&lt;/remark&gt;</param>
        /// <param name="farmId">Gets or sets farm id of scenes.</param>
        /// <param name="sequence">Gets or sets sequence number of scenes.</param>
        /// <param name="minSceneDate">Gets or sets minimum scene nominal date (inclusive).</param>
        /// <param name="maxSceneDate">Gets or sets maximum scene nominal date (inclusive).</param>
        /// <param name="names">Gets or sets list of names of scenes which is specified while creating a scene.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SceneResponse.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SceneResponseListResponse> SceneGetAllAsync(System.Collections.Generic.IEnumerable<string> types, System.Collections.Generic.IEnumerable<string> sources, string farmId, int? sequence, System.DateTimeOffset? minSceneDate, System.DateTimeOffset? maxSceneDate, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous16> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Scene?");
            if (types != null) 
            {
                foreach (var item_ in types) { urlBuilder_.Append(System.Uri.EscapeDataString("types") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sources != null) 
            {
                foreach (var item_ in sources) { urlBuilder_.Append(System.Uri.EscapeDataString("sources") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (farmId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("farmId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(farmId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sequence != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sequence") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sequence, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minSceneDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minSceneDate") + "=").Append(System.Uri.EscapeDataString(minSceneDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxSceneDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxSceneDate") + "=").Append(System.Uri.EscapeDataString(maxSceneDate.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SceneResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SceneResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new scene with given request body.</summary>
        /// <param name="input">User's scene request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SceneResponse> SceneCreateAsync(SceneRequest input)
        {
            return SceneCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new scene with given request body.</summary>
        /// <param name="input">User's scene request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SceneResponse> SceneCreateAsync(SceneRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Scene");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SceneResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SceneResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns scene for the given id.</summary>
        /// <param name="id">scene id (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SceneResponse> SceneGetAsync(string id)
        {
            return SceneGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns scene for the given id.</summary>
        /// <param name="id">scene id (system-generated).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SceneResponse> SceneGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Scene/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SceneResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SceneResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates scene with given id.</summary>
        /// <param name="id">Id of scene that need to be updated (system-generated).</param>
        /// <param name="input">New state of scene.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SceneUpdateAsync(string id, SceneRequest input)
        {
            return SceneUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates scene with given id.</summary>
        /// <param name="id">Id of scene that need to be updated (system-generated).</param>
        /// <param name="input">New state of scene.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SceneUpdateAsync(string id, SceneRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Scene/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes scene with given id.</summary>
        /// <param name="id">Id of scene to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SceneDeleteAsync(string id)
        {
            return SceneDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes scene with given id.</summary>
        /// <param name="id">Id of scene to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SceneDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Scene/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of scene file.</summary>
        /// <param name="types">Gets or sets list of types of scene files.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileType" for more information.&lt;/remark&gt;</param>
        /// <param name="contentTypes">Gets or sets list of content types of scene files.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileContentType" for more information.&lt;/remark&gt;</param>
        /// <param name="sceneId">Gets or sets scene id of scene files.</param>
        /// <param name="generateDownloadSASUrl">Gets or sets a value indicating whether download SAS URLs need to be generated.</param>
        /// <param name="names">Gets or sets list of names of scene files which is specified while creating a scene file.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SceneFileResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSceneFileResponseListResponse> SceneFileGetAllAsync(System.Collections.Generic.IEnumerable<string> types, System.Collections.Generic.IEnumerable<string> contentTypes, string sceneId, bool? generateDownloadSASUrl, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous17> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return SceneFileGetAllAsync(types, contentTypes, sceneId, generateDownloadSASUrl, names, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of scene file.</summary>
        /// <param name="types">Gets or sets list of types of scene files.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileType" for more information.&lt;/remark&gt;</param>
        /// <param name="contentTypes">Gets or sets list of content types of scene files.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileContentType" for more information.&lt;/remark&gt;</param>
        /// <param name="sceneId">Gets or sets scene id of scene files.</param>
        /// <param name="generateDownloadSASUrl">Gets or sets a value indicating whether download SAS URLs need to be generated.</param>
        /// <param name="names">Gets or sets list of names of scene files which is specified while creating a scene file.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SceneFileResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSceneFileResponseListResponse> SceneFileGetAllAsync(System.Collections.Generic.IEnumerable<string> types, System.Collections.Generic.IEnumerable<string> contentTypes, string sceneId, bool? generateDownloadSASUrl, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous17> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SceneFile?");
            if (types != null) 
            {
                foreach (var item_ in types) { urlBuilder_.Append(System.Uri.EscapeDataString("types") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (contentTypes != null) 
            {
                foreach (var item_ in contentTypes) { urlBuilder_.Append(System.Uri.EscapeDataString("contentTypes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sceneId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sceneId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sceneId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (generateDownloadSASUrl != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("generateDownloadSASUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(generateDownloadSASUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSceneFileResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetSceneFileResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new scene file with given request body.</summary>
        /// <param name="input">User's scene file request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CreateSceneFileResponse> SceneFileCreateAsync(SceneFileRequest input)
        {
            return SceneFileCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new scene file with given request body.</summary>
        /// <param name="input">User's scene file request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<CreateSceneFileResponse> SceneFileCreateAsync(SceneFileRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SceneFile");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreateSceneFileResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(CreateSceneFileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns scene file for the given id.</summary>
        /// <param name="id">scene file id (system-generated).</param>
        /// <param name="generateDownloadSASUrl">Specify if SAS URL need to be generated to download content of a file (Default: false).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetSceneFileResponse> SceneFileGetAsync(string id, bool? generateDownloadSASUrl)
        {
            return SceneFileGetAsync(id, generateDownloadSASUrl, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns scene file for the given id.</summary>
        /// <param name="id">scene file id (system-generated).</param>
        /// <param name="generateDownloadSASUrl">Specify if SAS URL need to be generated to download content of a file (Default: false).</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetSceneFileResponse> SceneFileGetAsync(string id, bool? generateDownloadSASUrl, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SceneFile/{id}?");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
            if (generateDownloadSASUrl != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("generateDownloadSASUrl") + "=").Append(System.Uri.EscapeDataString(ConvertToString(generateDownloadSASUrl, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetSceneFileResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetSceneFileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates scene file with given id.</summary>
        /// <param name="id">Id of scene file to be updated.</param>
        /// <param name="input">New state of scene file.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SceneFileUpdateAsync(string id, SceneFileRequest input)
        {
            return SceneFileUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates scene file with given id.</summary>
        /// <param name="id">Id of scene file to be updated.</param>
        /// <param name="input">New state of scene file.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SceneFileUpdateAsync(string id, SceneFileRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SceneFile/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes scene file with given id.</summary>
        /// <param name="id">Id of scene file to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SceneFileDeleteAsync(string id)
        {
            return SceneFileDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes scene file with given id.</summary>
        /// <param name="id">Id of scene file to be deleted.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SceneFileDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SceneFile/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of sensors.</summary>
        /// <param name="names">Gets or sets list of names of sensors.</param>
        /// <param name="hardwareIds">Gets or sets list of hardware id's.</param>
        /// <param name="sensorModelIds">Gets or sets list of sensor models id's.</param>
        /// <param name="deviceIds">Gets or sets list of device id's.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SensorResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SensorResponseListResponse> SensorGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> hardwareIds, System.Collections.Generic.IEnumerable<string> sensorModelIds, System.Collections.Generic.IEnumerable<string> deviceIds, System.Collections.Generic.IEnumerable<Anonymous18> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return SensorGetAllAsync(names, hardwareIds, sensorModelIds, deviceIds, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of sensors.</summary>
        /// <param name="names">Gets or sets list of names of sensors.</param>
        /// <param name="hardwareIds">Gets or sets list of hardware id's.</param>
        /// <param name="sensorModelIds">Gets or sets list of sensor models id's.</param>
        /// <param name="deviceIds">Gets or sets list of device id's.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SensorResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SensorResponseListResponse> SensorGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> hardwareIds, System.Collections.Generic.IEnumerable<string> sensorModelIds, System.Collections.Generic.IEnumerable<string> deviceIds, System.Collections.Generic.IEnumerable<Anonymous18> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Sensor?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (hardwareIds != null) 
            {
                foreach (var item_ in hardwareIds) { urlBuilder_.Append(System.Uri.EscapeDataString("hardwareIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (sensorModelIds != null) 
            {
                foreach (var item_ in sensorModelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("sensorModelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (deviceIds != null) 
            {
                foreach (var item_ in deviceIds) { urlBuilder_.Append(System.Uri.EscapeDataString("deviceIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SensorResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SensorResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new sensor with given request body.</summary>
        /// <param name="input">Sensor request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SensorResponse> SensorCreateAsync(SensorRequest input)
        {
            return SensorCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new sensor with given request body.</summary>
        /// <param name="input">Sensor request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SensorResponse> SensorCreateAsync(SensorRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Sensor");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SensorResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SensorResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns sensor for the given id.</summary>
        /// <param name="id">Id of the sensor object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SensorResponse> SensorGetAsync(string id)
        {
            return SensorGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns sensor for the given id.</summary>
        /// <param name="id">Id of the sensor object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SensorResponse> SensorGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Sensor/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SensorResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SensorResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the sensor with given id.</summary>
        /// <param name="id">Id of the sensor.</param>
        /// <param name="input">Sensor request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SensorUpdateAsync(string id, SensorRequest input)
        {
            return SensorUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the sensor with given id.</summary>
        /// <param name="id">Id of the sensor.</param>
        /// <param name="input">Sensor request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SensorUpdateAsync(string id, SensorRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Sensor/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the sensor with given id.</summary>
        /// <param name="id">Id of the sensor object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SensorDeleteAsync(string id)
        {
            return SensorDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the sensor with given id.</summary>
        /// <param name="id">Id of the sensor object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SensorDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Sensor/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of sensor models.</summary>
        /// <param name="manufacturers">Gets or sets list of manufacturers.</param>
        /// <param name="productCodes">Gets or sets list of product codes.</param>
        /// <param name="names">Gets or sets list of names of sensor models.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SensorModelResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SensorModelResponseListResponse> SensorModelGetAllAsync(System.Collections.Generic.IEnumerable<string> manufacturers, System.Collections.Generic.IEnumerable<string> productCodes, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous19> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return SensorModelGetAllAsync(manufacturers, productCodes, names, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of sensor models.</summary>
        /// <param name="manufacturers">Gets or sets list of manufacturers.</param>
        /// <param name="productCodes">Gets or sets list of product codes.</param>
        /// <param name="names">Gets or sets list of names of sensor models.</param>
        /// <param name="includes">Gets or sets list of properties to be included in SensorModelResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SensorModelResponseListResponse> SensorModelGetAllAsync(System.Collections.Generic.IEnumerable<string> manufacturers, System.Collections.Generic.IEnumerable<string> productCodes, System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous19> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SensorModel?");
            if (manufacturers != null) 
            {
                foreach (var item_ in manufacturers) { urlBuilder_.Append(System.Uri.EscapeDataString("manufacturers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (productCodes != null) 
            {
                foreach (var item_ in productCodes) { urlBuilder_.Append(System.Uri.EscapeDataString("productCodes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SensorModelResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SensorModelResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new sensor model with given request body.</summary>
        /// <param name="input">Sensor model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SensorModelResponse> SensorModelCreateAsync(SensorModelRequest input)
        {
            return SensorModelCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new sensor model with given request body.</summary>
        /// <param name="input">Sensor model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SensorModelResponse> SensorModelCreateAsync(SensorModelRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SensorModel");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SensorModelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SensorModelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns sensor model for the given id.</summary>
        /// <param name="id">Id of the sensor model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<SensorModelResponse> SensorModelGetAsync(string id)
        {
            return SensorModelGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns sensor model for the given id.</summary>
        /// <param name="id">Id of the sensor model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<SensorModelResponse> SensorModelGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SensorModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SensorModelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(SensorModelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the sensor model with given id.</summary>
        /// <param name="id">Id of the sensor model.</param>
        /// <param name="input">Sensor model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SensorModelUpdateAsync(string id, SensorModelRequest input)
        {
            return SensorModelUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the sensor model with given id.</summary>
        /// <param name="id">Id of the sensor model.</param>
        /// <param name="input">Sensor model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SensorModelUpdateAsync(string id, SensorModelRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SensorModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the sensor model with given id.</summary>
        /// <param name="id">Id of the sensor model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task SensorModelDeleteAsync(string id)
        {
            return SensorModelDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the sensor model with given id.</summary>
        /// <param name="id">Id of the sensor model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task SensorModelDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/SensorModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of telemetry messages.</summary>
        /// <param name="queryFilter">Telemetry query filter object.</param>
        /// <param name="removeDuplicateData">Flag to remove duplicate Telemetry data. Applicable only for weather data.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<QueryResultPage> TelemetryGetAllAsync(TelemetryQueryFilter queryFilter, bool? removeDuplicateData)
        {
            return TelemetryGetAllAsync(queryFilter, removeDuplicateData, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of telemetry messages.</summary>
        /// <param name="queryFilter">Telemetry query filter object.</param>
        /// <param name="removeDuplicateData">Flag to remove duplicate Telemetry data. Applicable only for weather data.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<QueryResultPage> TelemetryGetAllAsync(TelemetryQueryFilter queryFilter, bool? removeDuplicateData, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/Telemetry?");
            if (removeDuplicateData != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("removeDuplicateData") + "=").Append(System.Uri.EscapeDataString(ConvertToString(removeDuplicateData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(queryFilter, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<QueryResultPage>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(QueryResultPage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of weather data locations.</summary>
        /// <param name="names">Gets or sets list of names of weather data locations.</param>
        /// <param name="farmIds">Gets or sets list of Farm Ids.</param>
        /// <param name="weatherDataModelIds">Gets or sets list of weather data models id's.</param>
        /// <param name="includes">Gets or sets list of properties to be included in WeatherDataLocationResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeatherDataLocationResponseListResponse> WeatherDataLocationGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> farmIds, System.Collections.Generic.IEnumerable<string> weatherDataModelIds, System.Collections.Generic.IEnumerable<Anonymous20> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return WeatherDataLocationGetAllAsync(names, farmIds, weatherDataModelIds, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of weather data locations.</summary>
        /// <param name="names">Gets or sets list of names of weather data locations.</param>
        /// <param name="farmIds">Gets or sets list of Farm Ids.</param>
        /// <param name="weatherDataModelIds">Gets or sets list of weather data models id's.</param>
        /// <param name="includes">Gets or sets list of properties to be included in WeatherDataLocationResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeatherDataLocationResponseListResponse> WeatherDataLocationGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<string> farmIds, System.Collections.Generic.IEnumerable<string> weatherDataModelIds, System.Collections.Generic.IEnumerable<Anonymous20> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataLocation?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (farmIds != null) 
            {
                foreach (var item_ in farmIds) { urlBuilder_.Append(System.Uri.EscapeDataString("farmIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (weatherDataModelIds != null) 
            {
                foreach (var item_ in weatherDataModelIds) { urlBuilder_.Append(System.Uri.EscapeDataString("weatherDataModelIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeatherDataLocationResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WeatherDataLocationResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new weather data location with given request body.</summary>
        /// <param name="input">Weather data location request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeatherDataLocationResponse> WeatherDataLocationCreateAsync(WeatherDataLocationRequest input)
        {
            return WeatherDataLocationCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new weather data location with given request body.</summary>
        /// <param name="input">Weather data location request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeatherDataLocationResponse> WeatherDataLocationCreateAsync(WeatherDataLocationRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataLocation");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeatherDataLocationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WeatherDataLocationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns weather data location for the given id.</summary>
        /// <param name="id">Id of the weather data location object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeatherDataLocationResponse> WeatherDataLocationGetAsync(string id)
        {
            return WeatherDataLocationGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns weather data location for the given id.</summary>
        /// <param name="id">Id of the weather data location object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeatherDataLocationResponse> WeatherDataLocationGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataLocation/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeatherDataLocationResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WeatherDataLocationResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the weather data location with given id.</summary>
        /// <param name="id">Id of the weather data location.</param>
        /// <param name="input">Weather data location request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task WeatherDataLocationUpdateAsync(string id, WeatherDataLocationRequest input)
        {
            return WeatherDataLocationUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the weather data location with given id.</summary>
        /// <param name="id">Id of the weather data location.</param>
        /// <param name="input">Weather data location request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task WeatherDataLocationUpdateAsync(string id, WeatherDataLocationRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataLocation/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the weather data location with given id.</summary>
        /// <param name="id">Id of the weather data location object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task WeatherDataLocationDeleteAsync(string id)
        {
            return WeatherDataLocationDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the weather data location with given id.</summary>
        /// <param name="id">Id of the weather data location object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task WeatherDataLocationDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataLocation/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns list of weather data models.</summary>
        /// <param name="names">Gets or sets list of names of weather data models.</param>
        /// <param name="includes">Gets or sets list of properties to be included in WeatherDataModelResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeatherDataModelResponseListResponse> WeatherDataModelGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous21> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation)
        {
            return WeatherDataModelGetAllAsync(names, includes, ids, partnerId, minCreatedAt, maxCreatedAt, minLastModifiedAt, maxLastModifiedAt, propertyFilter, maxItems, x_ms_continuation, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns list of weather data models.</summary>
        /// <param name="names">Gets or sets list of names of weather data models.</param>
        /// <param name="includes">Gets or sets list of properties to be included in WeatherDataModelResponse. Default value is None.</param>
        /// <param name="ids">Gets or sets ids of the resource.</param>
        /// <param name="partnerId">Gets or sets id of the partner.</param>
        /// <param name="minCreatedAt">Gets or sets minimum creation date of resource (inclusive).</param>
        /// <param name="maxCreatedAt">Gets or sets maximum creation date of resource (inclusive).</param>
        /// <param name="minLastModifiedAt">Gets or sets minimum last modified date of resource (inclusive).</param>
        /// <param name="maxLastModifiedAt">Gets or sets maximum last modified date of resource (inclusive).</param>
        /// <param name="propertyFilter">Gets or sets property filter query.eg. "x.y.z eq 'somestringvalue' and p.q gt 5 and a eq false".
        /// Only AND operation is supported.
        /// Supported Operators: EQ,NE,LE,LT,GT,GE,CONTAINS,NCONTAINS.</param>
        /// <param name="maxItems">Gets or sets maximum number of items needed (inclusive).
        /// Maximum items = 1000.</param>
        /// <param name="x_ms_continuation">Gets or sets continuation token.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeatherDataModelResponseListResponse> WeatherDataModelGetAllAsync(System.Collections.Generic.IEnumerable<string> names, System.Collections.Generic.IEnumerable<Anonymous21> includes, System.Collections.Generic.IEnumerable<string> ids, string partnerId, System.DateTimeOffset? minCreatedAt, System.DateTimeOffset? maxCreatedAt, System.DateTimeOffset? minLastModifiedAt, System.DateTimeOffset? maxLastModifiedAt, string propertyFilter, int? maxItems, string x_ms_continuation, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataModel?");
            if (names != null) 
            {
                foreach (var item_ in names) { urlBuilder_.Append(System.Uri.EscapeDataString("names") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includes != null) 
            {
                foreach (var item_ in includes) { urlBuilder_.Append(System.Uri.EscapeDataString("includes") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (ids != null) 
            {
                foreach (var item_ in ids) { urlBuilder_.Append(System.Uri.EscapeDataString("ids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (partnerId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("PartnerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minCreatedAt") + "=").Append(System.Uri.EscapeDataString(minCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxCreatedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxCreatedAt") + "=").Append(System.Uri.EscapeDataString(maxCreatedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (minLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("minLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(minLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxLastModifiedAt != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxLastModifiedAt") + "=").Append(System.Uri.EscapeDataString(maxLastModifiedAt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (propertyFilter != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("propertyFilter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(propertyFilter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (maxItems != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("maxItems") + "=").Append(System.Uri.EscapeDataString(ConvertToString(maxItems, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    if (x_ms_continuation != null)
                        request_.Headers.TryAddWithoutValidation("x-ms-continuation", ConvertToString(x_ms_continuation, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeatherDataModelResponseListResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WeatherDataModelResponseListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Creates new weather data model with given request body.</summary>
        /// <param name="input">Weather data model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeatherDataModelResponse> WeatherDataModelCreateAsync(WeatherDataModelRequest input)
        {
            return WeatherDataModelCreateAsync(input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Creates new weather data model with given request body.</summary>
        /// <param name="input">Weather data model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeatherDataModelResponse> WeatherDataModelCreateAsync(WeatherDataModelRequest input, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataModel");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeatherDataModelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WeatherDataModelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Returns weather data model for the given id.</summary>
        /// <param name="id">Id of the weather data model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<WeatherDataModelResponse> WeatherDataModelGetAsync(string id)
        {
            return WeatherDataModelGetAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Returns weather data model for the given id.</summary>
        /// <param name="id">Id of the weather data model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<WeatherDataModelResponse> WeatherDataModelGetAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WeatherDataModelResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(WeatherDataModelResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Updates the weather data model with given id.</summary>
        /// <param name="id">Id of the weather data model.</param>
        /// <param name="input">Weather data model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task WeatherDataModelUpdateAsync(string id, WeatherDataModelRequest input)
        {
            return WeatherDataModelUpdateAsync(id, input, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Updates the weather data model with given id.</summary>
        /// <param name="id">Id of the weather data model.</param>
        /// <param name="input">Weather data model request object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task WeatherDataModelUpdateAsync(string id, WeatherDataModelRequest input, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(input, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Deletes the weather data model with given id.</summary>
        /// <param name="id">Id of the weather data model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task WeatherDataModelDeleteAsync(string id)
        {
            return WeatherDataModelDeleteAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Deletes the weather data model with given id.</summary>
        /// <param name="id">Id of the weather data model object.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task WeatherDataModelDeleteAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/WeatherDataModel/{id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
        
                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString(value, cultureInfo)?.ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AlertResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Defines Alert Response model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the alert.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets alert creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets alert last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets rule description.</summary>
        [Newtonsoft.Json.JsonProperty("ruleDescription", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleDescription { get; set; }
    
        /// <summary>Gets or sets rule severity.</summary>
        [Newtonsoft.Json.JsonProperty("ruleSeverity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertResponseRuleSeverity? RuleSeverity { get; set; }
    
        /// <summary>Gets or sets rule id.</summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleId { get; set; }
    
        /// <summary>Gets or sets rule actions.</summary>
        [Newtonsoft.Json.JsonProperty("ruleActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IAction> RuleActions { get; set; }
    
        /// <summary>Gets or sets device id in a rule.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceId { get; set; }
    
        /// <summary>Gets or sets last message received time.</summary>
        [Newtonsoft.Json.JsonProperty("deviceMsgReceived", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? DeviceMsgReceived { get; set; }
    
        /// <summary>Gets or sets a value indicating whether Alert is acknowledged.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertResponseStatus Status { get; set; }
    
    
    }
    
    /// <summary>Rule action interface.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IAction 
    {
        /// <summary>Gets action type for rule.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IActionType? Type { get; set; }
    
        /// <summary>Gets parameters of Action
        /// Note: Parameters should always be initialized as a case-insensitive dictionary.</summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Parameters { get; set; }
    
    
    }
    
    /// <summary>Defines Alert Request model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AlertRequest 
    {
        /// <summary>Gets or sets a value indicating whether Alert is acknowledged.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AlertRequestStatus Status { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceResponse> Items { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceResponse 
    {
        /// <summary>Gets or sets indicates the status of the device as follows: Online - When a provisioned device is having network connectivity, Offline - When a provisioned device is not having network connectivity.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceResponseStatus Status { get; set; }
    
        /// <summary>Gets or sets unique id auto generated for the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets last telemetry received time stamp.</summary>
        [Newtonsoft.Json.JsonProperty("lastTelemetryRcdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastTelemetryRcdAt { get; set; }
    
        /// <summary>Gets or sets device creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets device last modified date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets id of the associated Device Model.</summary>
        [Newtonsoft.Json.JsonProperty("deviceModelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceModelId { get; set; }
    
        /// <summary>Gets or sets unique id for the device such as MAC address etc.</summary>
        [Newtonsoft.Json.JsonProperty("hardwareId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string HardwareId { get; set; }
    
        /// <summary>Gets or sets id of the farm to which the device is provisioned to.
        /// Sensor Partners needs to ignore this field while creating and need to pass the old value while updating device.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets reporting interval of telemetry in seconds.</summary>
        [Newtonsoft.Json.JsonProperty("reportingInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? ReportingInterval { get; set; }
    
        /// <summary>Gets or sets location of the Device.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }
    
        /// <summary>Gets or sets id of the parent device to which this device is connected to.
        /// Eg.A Node connected to a Gateway; Node will have parentDeviceId as the Gateway.</summary>
        [Newtonsoft.Json.JsonProperty("parentDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentDeviceId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Location 
    {
        /// <summary>Gets or sets latitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("latitude", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-90.0D, 90.0D)]
        public double Latitude { get; set; }
    
        /// <summary>Gets or sets longitude coordinate.</summary>
        [Newtonsoft.Json.JsonProperty("longitude", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-180.0D, 180.0D)]
        public double Longitude { get; set; }
    
        /// <summary>Gets or sets elevation specified in meters.</summary>
        [Newtonsoft.Json.JsonProperty("elevation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Elevation { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceRequest 
    {
        /// <summary>Gets or sets id of the associated Device Model.</summary>
        [Newtonsoft.Json.JsonProperty("deviceModelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceModelId { get; set; }
    
        /// <summary>Gets or sets unique id for the device such as MAC address etc.</summary>
        [Newtonsoft.Json.JsonProperty("hardwareId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string HardwareId { get; set; }
    
        /// <summary>Gets or sets id of the farm to which the device is provisioned to.
        /// Sensor Partners needs to ignore this field while creating and need to pass the old value while updating device.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets reporting interval of telemetry in seconds.</summary>
        [Newtonsoft.Json.JsonProperty("reportingInterval", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? ReportingInterval { get; set; }
    
        /// <summary>Gets or sets location of the Device.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }
    
        /// <summary>Gets or sets id of the parent device to which this device is connected to.
        /// Eg.A Node connected to a Gateway; Node will have parentDeviceId as the Gateway.</summary>
        [Newtonsoft.Json.JsonProperty("parentDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentDeviceId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceModelResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DeviceModelResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Device Model Response Object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceModelResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the device type.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets device type creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets device type last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets type of the device.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceModelResponseType Type { get; set; }
    
        /// <summary>Gets or sets manufacturer name of the device.</summary>
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string Manufacturer { get; set; }
    
        /// <summary>Gets or sets Device product code Or Model name/Number.
        /// eg: EnviroMonitor#6800.</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string ProductCode { get; set; }
    
        /// <summary>Gets or sets details of ports mapped on the device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DevicePort> Ports { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DevicePort 
    {
        /// <summary>Gets or sets port name on the device.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets port type of the device.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DevicePortType Type { get; set; }
    
    
    }
    
    /// <summary>Device Model Request Object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DeviceModelRequest 
    {
        /// <summary>Gets or sets type of the device.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DeviceModelRequestType Type { get; set; }
    
        /// <summary>Gets or sets manufacturer name of the device.</summary>
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string Manufacturer { get; set; }
    
        /// <summary>Gets or sets Device product code Or Model name/Number.
        /// eg: EnviroMonitor#6800.</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string ProductCode { get; set; }
    
        /// <summary>Gets or sets details of ports mapped on the device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DevicePort> Ports { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExtendedTypeResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExtendedTypeResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Extended JobTypeId Response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExtendedTypeResponse 
    {
        /// <summary>Gets or sets unique id auto generated for extended type.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets farm creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets farm last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets key of extended type (user and system defined).</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExtendedTypeResponseKey Key { get; set; }
    
        /// <summary>Gets or sets type values associated with the key (user and system defined).</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Value { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
    
    }
    
    /// <summary>Extended type user request.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ExtendedTypeRequest 
    {
        /// <summary>Gets or sets key of extended type (user and system defined).</summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExtendedTypeRequestKey Key { get; set; }
    
        /// <summary>Gets or sets type values associated with the key (user and system defined).</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Value { get; set; } = new System.Collections.ObjectModel.Collection<string>();
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FarmResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FarmResponse> Items { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FarmResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the farm.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets farm creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets farm last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets geometry of the farm specified as GeoJson.</summary>
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IGeoJSONObject Geometry { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "type")]
    [JsonInheritanceAttribute("MultiPolygon", typeof(MultiPolygon))]
    [JsonInheritanceAttribute("Polygon", typeof(Polygon))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class IGeoJSONObject 
    {
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FarmRequest 
    {
        /// <summary>Gets or sets geometry of the farm specified as GeoJson.</summary>
        [Newtonsoft.Json.JsonProperty("geometry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IGeoJSONObject Geometry { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JobResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Model to define complete state of job in the system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobResponse 
    {
        /// <summary>Gets or sets system generated unique id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets job's creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets job's last modified date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets a value indicating whether flag indicating stop is requested by user or not.</summary>
        [Newtonsoft.Json.JsonProperty("stopRequested", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? StopRequested { get; set; }
    
        /// <summary>Gets or sets current state of job.</summary>
        [Newtonsoft.Json.JsonProperty("currentState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JobResponseCurrentState? CurrentState { get; set; }
    
        /// <summary>Gets or sets error message if any.
        /// &lt;remarks&gt;
        /// This field is going be deprecated in favor of Status which has more detailed information.
        /// &lt;/remarks&gt;</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        /// <summary>Gets or sets job's status.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobStatus Status { get; set; }
    
        /// <summary>Gets or sets debug information if any.</summary>
        [Newtonsoft.Json.JsonProperty("debugInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DebugInformation DebugInfo { get; set; }
    
        /// <summary>Gets or sets stats or information about a job.</summary>
        [Newtonsoft.Json.JsonProperty("info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobInfo Info { get; set; }
    
        /// <summary>Gets or sets Job type id for user-defined or system defined jobs.
        /// &lt;remarks&gt;Refer /JobType APIs for more information.&lt;/remarks&gt;</summary>
        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string TypeId { get; set; }
    
        /// <summary>Gets or sets job specific arguments specified in the corresponding Job Type.
        /// &lt;remarks&gt;
        /// If arguments are not in the format expected by the Job Type, you get a BAD Request.
        /// These arguments will be passed directly  to the Azure Data Factory Pipeline run.
        /// &lt;/remarks&gt;</summary>
        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Arguments { get; set; }
    
        /// <summary>Gets or sets specify parent job id for this job.
        /// &lt;remarks&gt;
        /// If there is no parent of a job then it should be set to null.
        /// It is user's responsibility to set correct parent job id for better job tracking and monitoring.
        /// &lt;/remarks&gt;</summary>
        [Newtonsoft.Json.JsonProperty("parentJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentJobId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobStatus 
    {
        [Newtonsoft.Json.JsonProperty("isSuccess", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSuccess { get; set; }
    
        [Newtonsoft.Json.JsonProperty("progressPercentage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? ProgressPercentage { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JobError Error { get; set; }
    
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Output { get; set; }
    
    
    }
    
    /// <summary>Debug information about a job.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DebugInformation 
    {
        /// <summary>Gets or sets information about ADF pipeline runs of job.</summary>
        [Newtonsoft.Json.JsonProperty("pipelineRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PipelineRun> PipelineRuns { get; set; }
    
    
    }
    
    /// <summary>More information about a job.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobInfo 
    {
        /// <summary>Gets or sets total number of ADF pipeline runs.</summary>
        [Newtonsoft.Json.JsonProperty("totalRuns", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalRuns { get; set; }
    
        /// <summary>Gets or sets total number of hours taken by job to be completed .</summary>
        [Newtonsoft.Json.JsonProperty("timeTakenHours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TimeTakenHours { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobError 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isTransient", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTransient { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PipelineRun 
    {
        [Newtonsoft.Json.JsonProperty("runId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RunId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pipelineName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PipelineName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lastUpdated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastUpdated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RunStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("runEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? RunEnd { get; set; }
    
        [Newtonsoft.Json.JsonProperty("durationInMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DurationInMs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    /// <summary>Model to define a job input in the system.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobRequest 
    {
        /// <summary>Gets or sets Job type id for user-defined or system defined jobs.
        /// &lt;remarks&gt;Refer /JobType APIs for more information.&lt;/remarks&gt;</summary>
        [Newtonsoft.Json.JsonProperty("typeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string TypeId { get; set; }
    
        /// <summary>Gets or sets job specific arguments specified in the corresponding Job Type.
        /// &lt;remarks&gt;
        /// If arguments are not in the format expected by the Job Type, you get a BAD Request.
        /// These arguments will be passed directly  to the Azure Data Factory Pipeline run.
        /// &lt;/remarks&gt;</summary>
        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Arguments { get; set; }
    
        /// <summary>Gets or sets specify parent job id for this job.
        /// &lt;remarks&gt;
        /// If there is no parent of a job then it should be set to null.
        /// It is user's responsibility to set correct parent job id for better job tracking and monitoring.
        /// &lt;/remarks&gt;</summary>
        [Newtonsoft.Json.JsonProperty("parentJobId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentJobId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JobTypeResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Job type response API model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeResponse 
    {
        /// <summary>Gets or sets unique id of job type.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets status of JobType.
        /// This status represents whether or not corresponding ADF pipeline has been successfully created.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JobTypeResponseStatus? Status { get; set; }
    
        /// <summary>Gets or sets error message.
        /// Helps in debugging for the Partner JobTypes.</summary>
        [Newtonsoft.Json.JsonProperty("errorMessage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ErrorMessage { get; set; }
    
        /// <summary>Gets or sets created date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets last modified date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets azure Data Factory pipeline specific details.</summary>
        [Newtonsoft.Json.JsonProperty("pipelineDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PipelineDetails PipelineDetails { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Wrapper class to keep all information related to a pipeline.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PipelineDetails 
    {
        /// <summary>Gets or sets user may have multiple resource groups which must be registered with us.
        /// Specify valid Resource Group Name where a desired pipeline is created.</summary>
        [Newtonsoft.Json.JsonProperty("resourceGroupName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(90, MinimumLength = 1)]
        public string ResourceGroupName { get; set; }
    
        /// <summary>Gets or sets user may have multiple Data Factory resources which must be registered with us.
        /// Specify valid Data Factory Name where a desired pipeline is created.</summary>
        [Newtonsoft.Json.JsonProperty("dataFactoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(63, MinimumLength = 3)]
        public string DataFactoryName { get; set; }
    
        /// <summary>Gets or sets Data Factory V2 pipeline name.</summary>
        [Newtonsoft.Json.JsonProperty("pipelineName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string PipelineName { get; set; }
    
        /// <summary>Gets or sets specify list of allowed pipeline parameters
        /// so that our system can put some validations while submitting a job.</summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Parameter> Parameters { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Parameter 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParameterType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsRequired { get; set; } = true;
    
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
    
    }
    
    /// <summary>Job type request API model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class JobTypeRequest 
    {
        /// <summary>Gets or sets azure Data Factory pipeline specific details.</summary>
        [Newtonsoft.Json.JsonProperty("pipelineDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PipelineDetails PipelineDetails { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerLimitedResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartnerLimitedResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Partner response model without connection strings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerLimitedResponse 
    {
        /// <summary>Gets or sets unique id of role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets partner docker details.</summary>
        [Newtonsoft.Json.JsonProperty("dockerDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DockerLimitedDetails DockerDetails { get; set; }
    
        /// <summary>Gets or sets role assignment creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets role assignment last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets debug information if any.</summary>
        [Newtonsoft.Json.JsonProperty("debugInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartnerDebugInfo> DebugInfo { get; set; }
    
        /// <summary>Gets or sets current Status of the Partner.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartnerLimitedResponseStatus? Status { get; set; }
    
        /// <summary>Gets or sets details of errors while doing Partner operations.</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        /// <summary>Gets or sets objectId of the partner.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string ObjectId { get; set; }
    
        /// <summary>Gets or sets tenantId of the partner.</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string TenantId { get; set; }
    
        /// <summary>Gets or sets partner type.</summary>
        [Newtonsoft.Json.JsonProperty("partnerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartnerLimitedResponsePartnerType PartnerType { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Docker model without docker credentials.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DockerLimitedDetails 
    {
        /// <summary>Gets or sets docker image name.</summary>
        [Newtonsoft.Json.JsonProperty("imageName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength = 3)]
        public string ImageName { get; set; } = "azurefarmbeats/farmbeats-noaa";
    
        /// <summary>Gets or sets docker image tag.</summary>
        [Newtonsoft.Json.JsonProperty("imageTag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength = 3)]
        public string ImageTag { get; set; } = "latest";
    
        /// <summary>Gets or sets Azure batch details to run the docker image.</summary>
        [Newtonsoft.Json.JsonProperty("azureBatchVMDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AzureBatchDetails AzureBatchVMDetails { get; set; } = new AzureBatchDetails();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerDebugInfo 
    {
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartnerDebugInfoAction? Action { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actionDateTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ActionDateTime { get; set; }
    
    
    }
    
    /// <summary>Docker image hosting details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AzureBatchDetails 
    {
        /// <summary>Gets or sets Azure Batch VM SKU.
        /// Currently we only support linux VMs.
        /// List of VM SKUs: https://docs.microsoft.com/en-us/azure/cloud-services/cloud-services-sizes-specs.</summary>
        [Newtonsoft.Json.JsonProperty("batchVMSKU", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BatchVMSKU { get; set; } = "standard_d3_v2";
    
        /// <summary>Gets or sets dedicated computer nodes for batch pool.</summary>
        [Newtonsoft.Json.JsonProperty("dedicatedComputerNodes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DedicatedComputerNodes { get; set; } = 1;
    
        /// <summary>Gets or sets Azure Batch Node Agent SKU ID.
        /// Currently only "batch.node.ubuntu 18.04" batch node agent is supported.</summary>
        [Newtonsoft.Json.JsonProperty("nodeAgentSKUID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NodeAgentSKUID { get; set; } = "batch.node.ubuntu 18.04";
    
    
    }
    
    /// <summary>Role Assignment request model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerRequest 
    {
        /// <summary>Gets or sets partner docker details.</summary>
        [Newtonsoft.Json.JsonProperty("dockerDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DockerDetails DockerDetails { get; set; }
    
        /// <summary>Gets or sets credentials for calling partner API referred in docker.</summary>
        [Newtonsoft.Json.JsonProperty("partnerCredentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> PartnerCredentials { get; set; }
    
        /// <summary>Gets or sets objectId of the partner.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string ObjectId { get; set; }
    
        /// <summary>Gets or sets tenantId of the partner.</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string TenantId { get; set; }
    
        /// <summary>Gets or sets partner type.</summary>
        [Newtonsoft.Json.JsonProperty("partnerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartnerRequestPartnerType PartnerType { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Docker image hosting details.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DockerDetails 
    {
        /// <summary>Gets or sets credentials required for docker login.</summary>
        [Newtonsoft.Json.JsonProperty("credentials", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Credentials Credentials { get; set; }
    
        /// <summary>Gets or sets docker image name.</summary>
        [Newtonsoft.Json.JsonProperty("imageName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength = 3)]
        public string ImageName { get; set; } = "azurefarmbeats/farmbeats-noaa";
    
        /// <summary>Gets or sets docker image tag.</summary>
        [Newtonsoft.Json.JsonProperty("imageTag", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(300, MinimumLength = 3)]
        public string ImageTag { get; set; } = "latest";
    
        /// <summary>Gets or sets Azure batch details to run the docker image.</summary>
        [Newtonsoft.Json.JsonProperty("azureBatchVMDetails", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AzureBatchDetails AzureBatchVMDetails { get; set; } = new AzureBatchDetails();
    
    
    }
    
    /// <summary>Credentials required for docker login.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Credentials 
    {
        /// <summary>Gets or sets username for docker login.</summary>
        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; }
    
        /// <summary>Gets or sets password for docker login.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }
    
    
    }
    
    /// <summary>Partner response model with connection strings.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PartnerResponse 
    {
        /// <summary>Gets primary Event Hub connectionString for partner integration as applicable.</summary>
        [Newtonsoft.Json.JsonProperty("primaryEventHubConnectionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PrimaryEventHubConnectionString { get; set; }
    
        /// <summary>Gets secondary Event Hub connectionString for partner integration as applicable.</summary>
        [Newtonsoft.Json.JsonProperty("secondaryEventHubConnectionString", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SecondaryEventHubConnectionString { get; set; }
    
        /// <summary>Gets or sets unique id of role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets partner docker details.</summary>
        [Newtonsoft.Json.JsonProperty("dockerDetails", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DockerLimitedDetails DockerDetails { get; set; }
    
        /// <summary>Gets or sets role assignment creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets role assignment last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets debug information if any.</summary>
        [Newtonsoft.Json.JsonProperty("debugInfo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PartnerDebugInfo> DebugInfo { get; set; }
    
        /// <summary>Gets or sets current Status of the Partner.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartnerResponseStatus? Status { get; set; }
    
        /// <summary>Gets or sets details of errors while doing Partner operations.</summary>
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        /// <summary>Gets or sets objectId of the partner.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string ObjectId { get; set; }
    
        /// <summary>Gets or sets tenantId of the partner.</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string TenantId { get; set; }
    
        /// <summary>Gets or sets partner type.</summary>
        [Newtonsoft.Json.JsonProperty("partnerType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartnerResponsePartnerType PartnerType { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Role Assignment request model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleAssignmentRequest 
    {
        /// <summary>Gets or sets roleDefinitionId of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("roleDefinitionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string RoleDefinitionId { get; set; }
    
        /// <summary>Gets or sets objectId of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string ObjectId { get; set; }
    
        /// <summary>Gets or sets objectIdType of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("objectIdType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleAssignmentRequestObjectIdType ObjectIdType { get; set; }
    
        /// <summary>Gets or sets tenantId of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string TenantId { get; set; }
    
    
    }
    
    /// <summary>Role Assignment response model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleAssignmentResponse 
    {
        /// <summary>Gets or sets unique id of role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets role assignment creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets role assignment last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets roleDefinitionId of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("roleDefinitionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string RoleDefinitionId { get; set; }
    
        /// <summary>Gets or sets objectId of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("objectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string ObjectId { get; set; }
    
        /// <summary>Gets or sets objectIdType of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("objectIdType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleAssignmentResponseObjectIdType ObjectIdType { get; set; }
    
        /// <summary>Gets or sets tenantId of the role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("tenantId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string TenantId { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleAssignmentResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoleAssignmentResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleDefinitionResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoleDefinitionResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Role Definition response model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoleDefinitionResponse 
    {
        /// <summary>Gets or sets unique id of role definition.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets role definition creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets role definition last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets permissions of the role definition.</summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Permission> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<Permission>();
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Permission 
    {
        [Newtonsoft.Json.JsonProperty("notActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<NotActions> NotActions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Actions> Actions { get; set; } = new System.Collections.ObjectModel.Collection<Actions>();
    
        [Newtonsoft.Json.JsonProperty("resourceTypes", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ResourceTypes> ResourceTypes { get; set; } = new System.Collections.ObjectModel.Collection<ResourceTypes>();
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RuleResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RuleResponse> Items { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RuleResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the rule.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets rule creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets rule last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets id of the farm to which it is applied to.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets list of conditions in the Rule.</summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Condition> Conditions { get; set; } = new System.Collections.ObjectModel.Collection<Condition>();
    
        /// <summary>Gets or sets severity level of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("severityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuleResponseSeverityLevel? SeverityLevel { get; set; } = FarmBeats.Api.Models.RuleResponseSeverityLevel.Info;
    
        /// <summary>Gets or sets status of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuleResponseStatus? Status { get; set; } = FarmBeats.Api.Models.RuleResponseStatus.Enabled;
    
        /// <summary>Gets or sets actions configuration of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IAction> Actions { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Condition 
    {
        /// <summary>Gets or sets Field name. The field name needs to be exactly as defined in the Sensor Model (Sensor Measure-&amp;gt;Name).</summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Field { get; set; }
    
        /// <summary>Gets or sets operator for comparison.</summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionOperator Operator { get; set; }
    
        /// <summary>Gets or sets sensor telemetry value.</summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public double Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RuleRequest 
    {
        /// <summary>Gets or sets id of the farm to which it is applied to.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets list of conditions in the Rule.</summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Condition> Conditions { get; set; } = new System.Collections.ObjectModel.Collection<Condition>();
    
        /// <summary>Gets or sets severity level of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("severityLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuleRequestSeverityLevel? SeverityLevel { get; set; } = FarmBeats.Api.Models.RuleRequestSeverityLevel.Info;
    
        /// <summary>Gets or sets status of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RuleRequestStatus? Status { get; set; } = FarmBeats.Api.Models.RuleRequestStatus.Enabled;
    
        /// <summary>Gets or sets actions configuration of the rule.</summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IAction> Actions { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SceneResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SceneResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Scene response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SceneResponse 
    {
        /// <summary>Gets or sets system generated unique id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets scene's creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets scene's last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets type of scene.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Type { get; set; }
    
        /// <summary>Gets or sets source of scene.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneSource" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Source { get; set; }
    
        /// <summary>Gets or sets farm id.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets the nominal date of the scene.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Gets or sets sequence of the scene within a particular date.
        /// When multiple scenes are available on the same date, each is assigned a different sequence number starting with 0.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Sequence { get; set; } = 0;
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Defines scene data for a space. This could be directly from satellite
    /// (a tile) or clipped/stitched/processed to an area of interest such
    /// as a farm.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SceneRequest 
    {
        /// <summary>Gets or sets type of scene.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Type { get; set; }
    
        /// <summary>Gets or sets source of scene.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneSource" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Source { get; set; }
    
        /// <summary>Gets or sets farm id.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets the nominal date of the scene.</summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Date { get; set; }
    
        /// <summary>Gets or sets sequence of the scene within a particular date.
        /// When multiple scenes are available on the same date, each is assigned a different sequence number starting with 0.</summary>
        [Newtonsoft.Json.JsonProperty("sequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Sequence { get; set; } = 0;
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetSceneFileResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GetSceneFileResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Create scene file response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetSceneFileResponse 
    {
        /// <summary>Gets or sets Shared Access URL (SAS) to download actual content of file using Azure blob storage client.</summary>
        [Newtonsoft.Json.JsonProperty("downloadSASUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DownloadSASUrl { get; set; }
    
        /// <summary>Gets or sets system generated unique id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets scene file's creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets scene file's last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets blob path for actual content of file to download/upload if user has access to blob storage.
        /// User should use Azure blob storage client to accomplish this.</summary>
        [Newtonsoft.Json.JsonProperty("blobUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlobUrl { get; set; }
    
        /// <summary>Gets or sets scene id.</summary>
        [Newtonsoft.Json.JsonProperty("sceneId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string SceneId { get; set; }
    
        /// <summary>Gets or sets type of scene file.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Type { get; set; }
    
        /// <summary>Gets or sets content type of scene file.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileContentType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string ContentType { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Defines scene file.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SceneFileRequest 
    {
        /// <summary>Gets or sets scene id.</summary>
        [Newtonsoft.Json.JsonProperty("sceneId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string SceneId { get; set; }
    
        /// <summary>Gets or sets type of scene file.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Type { get; set; }
    
        /// <summary>Gets or sets content type of scene file.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileContentType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string ContentType { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Create scene file response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CreateSceneFileResponse 
    {
        /// <summary>Gets or sets Shared Access URL (SAS) to upload actual content of file using Azure blob storage client.</summary>
        [Newtonsoft.Json.JsonProperty("uploadSASUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UploadSASUrl { get; set; }
    
        /// <summary>Gets or sets system generated unique id.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets scene file's creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets scene file's last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets blob path for actual content of file to download/upload if user has access to blob storage.
        /// User should use Azure blob storage client to accomplish this.</summary>
        [Newtonsoft.Json.JsonProperty("blobUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BlobUrl { get; set; }
    
        /// <summary>Gets or sets scene id.</summary>
        [Newtonsoft.Json.JsonProperty("sceneId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 3)]
        public string SceneId { get; set; }
    
        /// <summary>Gets or sets type of scene file.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Type { get; set; }
    
        /// <summary>Gets or sets content type of scene file.
        /// &lt;remark&gt;Refer /ExtendedType APIs with key "SceneFileContentType" for more information.&lt;/remark&gt;</summary>
        [Newtonsoft.Json.JsonProperty("contentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string ContentType { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SensorResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SensorResponse> Items { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SensorResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the sensor.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets sensor creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets sensor last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets id of the sensor given by manufacturer.</summary>
        [Newtonsoft.Json.JsonProperty("hardwareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string HardwareId { get; set; }
    
        /// <summary>Gets or sets id of the associated sensor Model.</summary>
        [Newtonsoft.Json.JsonProperty("sensorModelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SensorModelId { get; set; }
    
        /// <summary>Gets or sets location of the sensor.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }
    
        /// <summary>Gets or sets depth in centimeters.</summary>
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        /// <summary>Gets or sets port to which the sensor is connected.</summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DevicePort Port { get; set; }
    
        /// <summary>Gets or sets id of the associated device.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SensorRequest 
    {
        /// <summary>Gets or sets id of the sensor given by manufacturer.</summary>
        [Newtonsoft.Json.JsonProperty("hardwareId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string HardwareId { get; set; }
    
        /// <summary>Gets or sets id of the associated sensor Model.</summary>
        [Newtonsoft.Json.JsonProperty("sensorModelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SensorModelId { get; set; }
    
        /// <summary>Gets or sets location of the sensor.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Location Location { get; set; }
    
        /// <summary>Gets or sets depth in centimeters.</summary>
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        /// <summary>Gets or sets port to which the sensor is connected.</summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DevicePort Port { get; set; }
    
        /// <summary>Gets or sets id of the associated device.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeviceId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SensorModelResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SensorModelResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Sensor Model Response Object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SensorModelResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the sensor type.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets sensor type creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets sensor type last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets type of the sensor.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SensorModelResponseType Type { get; set; }
    
        /// <summary>Gets or sets manufacturer of the sensor.</summary>
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Manufacturer { get; set; }
    
        /// <summary>Gets or sets sensor product code or Model Name/Number.
        /// eg: RS-CO2-N01.</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string ProductCode { get; set; }
    
        /// <summary>Gets or sets list of Measurements supported by sensor.</summary>
        [Newtonsoft.Json.JsonProperty("sensorMeasures", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SensorMeasure> SensorMeasures { get; set; } = new System.Collections.ObjectModel.Collection<SensorMeasure>();
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SensorMeasure 
    {
        /// <summary>Gets or sets name of the Sensor Measure.
        /// For measure from different depths, please specify the depth. Eg.soil_moisture_15cm
        /// This name has to be consistent with the telemetry data.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets sensor telemetry data type.</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SensorMeasureDataType DataType { get; set; }
    
        /// <summary>Gets or sets measurement type of sensor telemetry data. (See ExtendedTypes with key "SensorMeasureType" to know all valid values).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Gets or sets unit of sensor telemetry data. (See ExtendedTypes with key "SensorMeasureUnit" to know all valid values).</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }
    
        /// <summary>Gets or sets aggregation done on telemetry data.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SensorMeasureAggregationType? AggregationType { get; set; } = FarmBeats.Api.Models.SensorMeasureAggregationType.None;
    
        /// <summary>Gets or sets depth in centimeters.</summary>
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        /// <summary>Gets or sets description of the Sensor Measure.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
    
    }
    
    /// <summary>Sensor Model Request Object.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SensorModelRequest 
    {
        /// <summary>Gets or sets type of the sensor.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SensorModelRequestType Type { get; set; }
    
        /// <summary>Gets or sets manufacturer of the sensor.</summary>
        [Newtonsoft.Json.JsonProperty("manufacturer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Manufacturer { get; set; }
    
        /// <summary>Gets or sets sensor product code or Model Name/Number.
        /// eg: RS-CO2-N01.</summary>
        [Newtonsoft.Json.JsonProperty("productCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string ProductCode { get; set; }
    
        /// <summary>Gets or sets list of Measurements supported by sensor.</summary>
        [Newtonsoft.Json.JsonProperty("sensorMeasures", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SensorMeasure> SensorMeasures { get; set; } = new System.Collections.ObjectModel.Collection<SensorMeasure>();
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TelemetryQueryFilter 
    {
        [Newtonsoft.Json.JsonProperty("sensorId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SensorId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("weatherDataLocationId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WeatherDataLocationId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("searchSpan", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DateTimeRange SearchSpan { get; set; } = new DateTimeRange();
    
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Tsx Filter { get; set; }
    
        [Newtonsoft.Json.JsonProperty("take", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Take { get; set; } = 250000;
    
        [Newtonsoft.Json.JsonProperty("projectedProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>> ProjectedProperties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DateTimeRange 
    {
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? From { get; set; }
    
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? To { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Tsx 
    {
        [Newtonsoft.Json.JsonProperty("tsx", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tsx1 { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class QueryResultPage 
    {
        [Newtonsoft.Json.JsonProperty("timestamps", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.DateTimeOffset> Timestamps { get; set; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyValues> Properties { get; set; }
    
        [Newtonsoft.Json.JsonProperty("continuationToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ContinuationToken { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PropertyValues 
    {
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Values { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeatherDataLocationResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WeatherDataLocationResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Weather data location Response model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeatherDataLocationResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the weatherDataLocation.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets weatherDataLocation creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets weatherDataLocation last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets id of the associated weather data model.</summary>
        [Newtonsoft.Json.JsonProperty("weatherDataModelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeatherDataModelId { get; set; }
    
        /// <summary>Gets or sets location of the weather data location. This can't be changed later.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Location Location { get; set; } = new Location();
    
        /// <summary>Gets or sets id of the associated farm.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Weather data location Request model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeatherDataLocationRequest 
    {
        /// <summary>Gets or sets id of the associated weather data model.</summary>
        [Newtonsoft.Json.JsonProperty("weatherDataModelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WeatherDataModelId { get; set; }
    
        /// <summary>Gets or sets location of the weather data location. This can't be changed later.</summary>
        [Newtonsoft.Json.JsonProperty("location", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Location Location { get; set; } = new Location();
    
        /// <summary>Gets or sets id of the associated farm.</summary>
        [Newtonsoft.Json.JsonProperty("farmId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FarmId { get; set; }
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Paginated list response.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeatherDataModelResponseListResponse 
    {
        /// <summary>Gets or sets list of objects.</summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WeatherDataModelResponse> Items { get; set; }
    
    
    }
    
    /// <summary>Weather data model Response model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeatherDataModelResponse 
    {
        /// <summary>Gets or sets unique id auto generated for the weather data model type.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }
    
        /// <summary>Gets or sets weather data model type creation date.</summary>
        [Newtonsoft.Json.JsonProperty("createdAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? CreatedAt { get; set; }
    
        /// <summary>Gets or sets weather data model type last updated date.</summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? LastModifiedAt { get; set; }
    
        /// <summary>Gets or sets list of Measurements supported by weather data location.</summary>
        [Newtonsoft.Json.JsonProperty("weatherMeasures", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WeatherMeasure> WeatherMeasures { get; set; } = new System.Collections.ObjectModel.Collection<WeatherMeasure>();
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    /// <summary>Definition for weather measure.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeatherMeasure 
    {
        /// <summary>Gets or sets name of the Weather Measure.
        /// For measure from different depths, please specify the depth. Eg.soil_moisture_15cm
        /// This name has to be consistent with the telemetry data.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets weather telemetry data type.</summary>
        [Newtonsoft.Json.JsonProperty("dataType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherMeasureDataType DataType { get; set; }
    
        /// <summary>Gets or sets weather measure enum definition.</summary>
        [Newtonsoft.Json.JsonProperty("measureEnumDefinition", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, int> MeasureEnumDefinition { get; set; }
    
        /// <summary>Gets or sets measurement type of weather telemetry data. (See ExtendedTypes with key "WeatherMeasureType" to know all valid values).</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }
    
        /// <summary>Gets or sets unit of weather telemetry data. (See ExtendedTypes with key "WeatherMeasureUnit" to know all valid values).</summary>
        [Newtonsoft.Json.JsonProperty("unit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Unit { get; set; }
    
        /// <summary>Gets or sets aggregation done on weather telemetry data.</summary>
        [Newtonsoft.Json.JsonProperty("aggregationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WeatherMeasureAggregationType? AggregationType { get; set; } = FarmBeats.Api.Models.WeatherMeasureAggregationType.None;
    
        /// <summary>Gets or sets depth in centimeters.</summary>
        [Newtonsoft.Json.JsonProperty("depth", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Depth { get; set; }
    
        /// <summary>Gets or sets description of the Weather Measure.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
    
    }
    
    /// <summary>Weather data model Request model.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WeatherDataModelRequest 
    {
        /// <summary>Gets or sets list of Measurements supported by weather data location.</summary>
        [Newtonsoft.Json.JsonProperty("weatherMeasures", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WeatherMeasure> WeatherMeasures { get; set; } = new System.Collections.ObjectModel.Collection<WeatherMeasure>();
    
        /// <summary>Gets or sets name to identify resource.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
        public string Name { get; set; }
    
        /// <summary>Gets or sets textual description of resource.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1000, MinimumLength = 3)]
        public string Description { get; set; }
    
        /// <summary>Gets or sets additional properties of the resource.</summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MultiPolygon : IGeoJSONObject
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MultiPolygonType Type { get; set; }
    
        //[Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Always)]
        //[System.ComponentModel.DataAnnotations.Required]
        //public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>>>> Coordinates { get; set; } = new System.Collections.ObjectModel.Collection<System.Collections.ObjectModel.Collection<System.Collections.ObjectModel.Collection<System.Collections.ObjectModel.Collection<double>>>>();

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public double[][][][] Coordinates { get; set; } = new double[][][][] { };

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Polygon : IGeoJSONObject
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PolygonType Type { get; set; }
    
        //[Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Always)]
        //[System.ComponentModel.DataAnnotations.Required]
        //public System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<System.Collections.Generic.ICollection<double>>> Coordinates { get; set; } = new System.Collections.ObjectModel.Collection<System.Collections.ObjectModel.Collection<System.Collections.ObjectModel.Collection<double>>>();

        [Newtonsoft.Json.JsonProperty("coordinates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public double[][][] Coordinates { get; set; } = new double[][][] { };

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 2,
    
    }
    
    /// <summary>Gets or sets alert status.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Acknowledged")]
        Acknowledged = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RuleActions")]
        RuleActions = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
    }
    
    /// <summary>Gets or sets device type.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gateway")]
        Gateway = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ports")]
        Ports = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SceneType")]
        SceneType = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneSource")]
        SceneSource = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneFileContentType")]
        SceneFileContentType = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneFileType")]
        SceneFileType = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorMeasureType")]
        SensorMeasureType = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorMeasureUnit")]
        SensorMeasureUnit = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherMeasureType")]
        WeatherMeasureType = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherMeasureUnit")]
        WeatherMeasureUnit = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Geometry")]
        Geometry = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingRetry")]
        PendingRetry = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stopped")]
        Stopped = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Arguments")]
        Arguments = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Provisioning")]
        Provisioning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingRetry")]
        PendingRetry = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ready")]
        Ready = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PipelineDetails")]
        PipelineDetails = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Weather")]
        Weather = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Imagery")]
        Imagery = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sensor")]
        Sensor = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UserId")]
        UserId = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalId")]
        ServicePrincipalId = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous14
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 2,
    
    }
    
    /// <summary>Gets or sets rule enabled.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RuleStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous15
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Actions")]
        Actions = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Conditions")]
        Conditions = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous16
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous17
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous18
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous19
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorMeasures")]
        SensorMeasures = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous20
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous21
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Properties")]
        Properties = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherMeasures")]
        WeatherMeasures = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertResponseRuleSeverity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Acknowledged")]
        Acknowledged = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum IActionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AlertRequestStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Open")]
        Open = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Acknowledged")]
        Acknowledged = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Closed")]
        Closed = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeviceResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Offline")]
        Offline = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Online")]
        Online = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeviceModelResponseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gateway")]
        Gateway = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DevicePortType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Analog")]
        Analog = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Digital")]
        Digital = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum DeviceModelRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Node")]
        Node = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Gateway")]
        Gateway = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ExtendedTypeResponseKey
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SceneType")]
        SceneType = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneSource")]
        SceneSource = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneFileContentType")]
        SceneFileContentType = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneFileType")]
        SceneFileType = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorMeasureType")]
        SensorMeasureType = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorMeasureUnit")]
        SensorMeasureUnit = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherMeasureType")]
        WeatherMeasureType = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherMeasureUnit")]
        WeatherMeasureUnit = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ExtendedTypeRequestKey
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SceneType")]
        SceneType = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneSource")]
        SceneSource = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneFileContentType")]
        SceneFileContentType = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneFileType")]
        SceneFileType = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorMeasureType")]
        SensorMeasureType = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorMeasureUnit")]
        SensorMeasureUnit = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherMeasureType")]
        WeatherMeasureType = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherMeasureUnit")]
        WeatherMeasureUnit = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JobResponseCurrentState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Submitted")]
        Submitted = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Accepted")]
        Accepted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Running")]
        Running = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingRetry")]
        PendingRetry = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Succeeded")]
        Succeeded = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Stopped")]
        Stopped = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum JobTypeResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Provisioning")]
        Provisioning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingRetry")]
        PendingRetry = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Ready")]
        Ready = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Obsolete")]
        Obsolete = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParameterType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"String")]
        String = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Int")]
        Int = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Float")]
        Float = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Bool")]
        Bool = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Array")]
        Array = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PartnerLimitedResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Initializing")]
        Initializing = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingRetry")]
        PendingRetry = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Updating")]
        Updating = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingDelete")]
        PendingDelete = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Deleting")]
        Deleting = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PartnerLimitedResponsePartnerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Weather")]
        Weather = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Imagery")]
        Imagery = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sensor")]
        Sensor = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PartnerDebugInfoAction
    {
        [System.Runtime.Serialization.EnumMember(Value = @"InitStarted")]
        InitStarted = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UpdationStarted")]
        UpdationStarted = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleAssignmentCompleted")]
        RoleAssignmentCompleted = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleAssignmentFailed")]
        RoleAssignmentFailed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BatchPoolCreated")]
        BatchPoolCreated = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BatchPoolCreationFailed")]
        BatchPoolCreationFailed = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BootstrapCompleted")]
        BootstrapCompleted = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BootstrapFailed")]
        BootstrapFailed = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PipelinesCreated")]
        PipelinesCreated = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PipelinesCreationFailed")]
        PipelinesCreationFailed = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Provisioned")]
        Provisioned = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeletionStarted")]
        DeletionStarted = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleAssignmentDeleted")]
        RoleAssignmentDeleted = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleAssignmentDeletionFailed")]
        RoleAssignmentDeletionFailed = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BatchPoolDeleted")]
        BatchPoolDeleted = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BatchPoolDeletionFailed")]
        BatchPoolDeletionFailed = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BootstrapJobDeleted")]
        BootstrapJobDeleted = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BootstrapJobDeletionFailed")]
        BootstrapJobDeletionFailed = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PipelinesDeleted")]
        PipelinesDeleted = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PipelinesDeletionFailed")]
        PipelinesDeletionFailed = 19,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PartnerRequestPartnerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Weather")]
        Weather = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Imagery")]
        Imagery = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sensor")]
        Sensor = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PartnerResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Active")]
        Active = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Waiting")]
        Waiting = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Initializing")]
        Initializing = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingRetry")]
        PendingRetry = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Failed")]
        Failed = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Updating")]
        Updating = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PendingDelete")]
        PendingDelete = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Deleting")]
        Deleting = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PartnerResponsePartnerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Weather")]
        Weather = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Imagery")]
        Imagery = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sensor")]
        Sensor = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RoleAssignmentRequestObjectIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UserId")]
        UserId = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalId")]
        ServicePrincipalId = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RoleAssignmentResponseObjectIdType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"UserId")]
        UserId = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ServicePrincipalId")]
        ServicePrincipalId = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum NotActions
    {
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Actions
    {
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GET")]
        GET = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POST")]
        POST = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUT")]
        PUT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PATCH")]
        PATCH = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DELETE")]
        DELETE = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ResourceTypes
    {
        [System.Runtime.Serialization.EnumMember(Value = @"All")]
        All = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Device")]
        Device = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DeviceModel")]
        DeviceModel = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Rule")]
        Rule = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sensor")]
        Sensor = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SensorModel")]
        SensorModel = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherDataLocation")]
        WeatherDataLocation = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WeatherDataModel")]
        WeatherDataModel = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Job")]
        Job = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"JobType")]
        JobType = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Scene")]
        Scene = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SceneFile")]
        SceneFile = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Farm")]
        Farm = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleAssignment")]
        RoleAssignment = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RoleDefinition")]
        RoleDefinition = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Alert")]
        Alert = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ExtendedType")]
        ExtendedType = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Telemetry")]
        Telemetry = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Partner")]
        Partner = 18,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RuleResponseSeverityLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RuleResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ConditionOperator
    {
        [System.Runtime.Serialization.EnumMember(Value = @"EQ")]
        EQ = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GT")]
        GT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LT")]
        LT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"GE")]
        GE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LE")]
        LE = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RuleRequestSeverityLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Info")]
        Info = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Critical")]
        Critical = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RuleRequestStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Enabled")]
        Enabled = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SensorModelResponseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Analog")]
        Analog = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Digital")]
        Digital = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SensorMeasureDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Double")]
        Double = 0,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SensorMeasureAggregationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Average")]
        Average = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StandardDeviation")]
        StandardDeviation = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sum")]
        Sum = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Total")]
        Total = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SensorModelRequestType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Analog")]
        Analog = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Digital")]
        Digital = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WeatherMeasureDataType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Double")]
        Double = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Enum")]
        Enum = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum WeatherMeasureAggregationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Average")]
        Average = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Maximum")]
        Maximum = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Minimum")]
        Minimum = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"StandardDeviation")]
        StandardDeviation = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Sum")]
        Sum = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"Total")]
        Total = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum MultiPolygonType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Polygon")]
        Polygon = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MultiPolygon")]
        MultiPolygon = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PolygonType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Polygon")]
        Polygon = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MultiPolygon")]
        MultiPolygon = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }
    
        public string Key { get; }
    
        public System.Type Type { get; }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.23.0 (Newtonsoft.Json v11.0.0.0)")]
    internal class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";
    
        private readonly string _discriminator;
    
        [System.ThreadStatic]
        private static bool _isReading;
    
        [System.ThreadStatic]
        private static bool _isWriting;
    
        public JsonInheritanceConverter()
        {
            _discriminator = DefaultDiscriminatorName;
        }
    
        public JsonInheritanceConverter(string discriminator)
        {
            _discriminator = discriminator;
        }
    
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;
    
                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminator, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }
    
        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }
    
        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }
    
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;
    
            var discriminator = Newtonsoft.Json.Linq.Extensions.Value<string>(jObject.GetValue(_discriminator));
            var subtype = GetObjectSubtype(objectType, discriminator);
           
            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminator))
            {
                jObject.Remove(_discriminator);
            }
    
            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }
    
        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }
    
            return objectType;
        }
    
        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }
    
            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.6.2.0 (NJsonSchema v10.1.23.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108